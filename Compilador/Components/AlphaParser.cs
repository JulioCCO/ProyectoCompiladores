//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/Compi/Compilador/Compilador/Components\AlphaParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class AlphaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, NEW=3, USING=4, SEMICOLON=5, COMMA=6, ASSIGN=7, INC=8, 
		DEC=9, IF=10, ELSE=11, FOR=12, WHILE=13, BREAK=14, RETURN=15, READ=16, 
		WRITE=17, TRUE=18, FALSE=19, DOT=20, CONST=21, EQUALS=22, NOT_EQUALS=23, 
		LESS_THAN=24, LESS_OR_EQUALS=25, GREATER_THAN=26, GREATER_OR_EQUALS=27, 
		LOGICAL_AND=28, LOGICAL_OR=29, LEFT_PAREN=30, RIGHT_PAREN=31, LEFT_BRACE=32, 
		RIGHT_BRACE=33, LEFT_BRACKET=34, RIGHT_BRACKET=35, PLUS=36, MINUS=37, 
		MULT=38, DIV=39, MOD=40, NUMBER=41, CHAR_CONST=42, STRING_CONST=43, INT_CONST=44, 
		FLOAT_CONST=45, DOUBLE_CONST=46, BOOL_CONST=47, INT=48, FLOAT=49, DOUBLE=50, 
		CHAR=51, BOOL=52, ARRAY=53, IDENTIFIER=54, WS=55, COMMENT=56, LINE_COMMENT=57;
	public const int
		RULE_program = 0, RULE_using = 1, RULE_varDecl = 2, RULE_classDecl = 3, 
		RULE_methodDecl = 4, RULE_formPars = 5, RULE_type = 6, RULE_block = 7, 
		RULE_statement = 8, RULE_actPars = 9, RULE_condition = 10, RULE_condTerm = 11, 
		RULE_condFact = 12, RULE_cast = 13, RULE_expr = 14, RULE_term = 15, RULE_factor = 16, 
		RULE_designator = 17, RULE_relop = 18, RULE_addop = 19, RULE_mulop = 20, 
		RULE_ident = 21, RULE_array = 22;
	public static readonly string[] ruleNames = {
		"program", "using", "varDecl", "classDecl", "methodDecl", "formPars", 
		"type", "block", "statement", "actPars", "condition", "condTerm", "condFact", 
		"cast", "expr", "term", "factor", "designator", "relop", "addop", "mulop", 
		"ident", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'new'", "'using'", "';'", "','", "'='", "'++'", 
		"'--'", "'if'", "'else'", "'for'", "'while'", "'break'", "'return'", "'read'", 
		"'write'", "'true'", "'false'", "'.'", "'const'", "'=='", "'!='", "'<'", 
		"'<='", "'>'", "'>='", "'&&'", "'||'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "'+'", "'-'", "'*'", "'/'", "'%'", null, null, null, null, null, 
		null, null, "'int'", "'float'", "'double'", "'char'", "'bool'", "'array'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "NEW", "USING", "SEMICOLON", "COMMA", "ASSIGN", 
		"INC", "DEC", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", "READ", 
		"WRITE", "TRUE", "FALSE", "DOT", "CONST", "EQUALS", "NOT_EQUALS", "LESS_THAN", 
		"LESS_OR_EQUALS", "GREATER_THAN", "GREATER_OR_EQUALS", "LOGICAL_AND", 
		"LOGICAL_OR", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE", 
		"LEFT_BRACKET", "RIGHT_BRACKET", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
		"NUMBER", "CHAR_CONST", "STRING_CONST", "INT_CONST", "FLOAT_CONST", "DOUBLE_CONST", 
		"BOOL_CONST", "INT", "FLOAT", "DOUBLE", "CHAR", "BOOL", "ARRAY", "IDENTIFIER", 
		"WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AlphaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AlphaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AlphaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AlphaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(AlphaParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(AlphaParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(AlphaParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext @using() {
			return GetRuleContext<UsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 46;
				@using();
				}
			}

			State = 49;
			Match(CLASS);
			State = 50;
			ident();
			State = 51;
			Match(LEFT_BRACE);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 18014398509481990L) != 0) {
				{
				State = 55;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 52;
					varDecl();
					}
					break;
				case 2:
					{
					State = 53;
					classDecl();
					}
					break;
				case 3:
					{
					State = 54;
					methodDecl();
					}
					break;
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 60;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(AlphaParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AlphaParser.SEMICOLON, 0); }
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(USING);
			State = 63;
			ident();
			State = 64;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AlphaParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AlphaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AlphaParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			type();
			State = 67;
			ident();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 68;
				Match(COMMA);
				State = 69;
				ident();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 75;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(AlphaParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(AlphaParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(AlphaParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(CLASS);
			State = 78;
			ident();
			State = 79;
			Match(LEFT_BRACE);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 80;
				varDecl();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(AlphaParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(AlphaParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(AlphaParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 88;
				type();
				}
				break;
			case VOID:
				{
				State = 89;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 92;
			ident();
			State = 93;
			Match(LEFT_PAREN);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 94;
				formPars();
				}
			}

			State = 97;
			Match(RIGHT_PAREN);
			State = 98;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AlphaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AlphaParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 10, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			type();
			State = 101;
			ident();
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 102;
				Match(COMMA);
				State = 103;
				type();
				State = 104;
				ident();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ident();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 112;
				array();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(AlphaParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(AlphaParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(LEFT_BRACE);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 18014402804708384L) != 0) {
				{
				State = 118;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 116;
					varDecl();
					}
					break;
				case 2:
					{
					State = 117;
					statement();
					}
					break;
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 123;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(AlphaParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(AlphaParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(AlphaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(AlphaParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(AlphaParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(AlphaParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(AlphaParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(AlphaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(AlphaParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(AlphaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(AlphaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(AlphaParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(AlphaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(AlphaParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(AlphaParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AlphaParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AlphaParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		int _la;
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				designator();
				State = 135;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					State = 126;
					Match(ASSIGN);
					State = 127;
					expr();
					}
					break;
				case LEFT_PAREN:
					{
					State = 128;
					Match(LEFT_PAREN);
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 18029930185752584L) != 0) {
						{
						State = 129;
						actPars();
						}
					}

					State = 132;
					Match(RIGHT_PAREN);
					}
					break;
				case INC:
					{
					State = 133;
					Match(INC);
					}
					break;
				case DEC:
					{
					State = 134;
					Match(DEC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 137;
				Match(SEMICOLON);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				Match(IF);
				State = 140;
				Match(LEFT_PAREN);
				State = 141;
				condition();
				State = 142;
				Match(RIGHT_PAREN);
				State = 143;
				statement();
				State = 146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 144;
					Match(ELSE);
					State = 145;
					statement();
					}
					break;
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 148;
				Match(FOR);
				State = 149;
				Match(LEFT_PAREN);
				State = 150;
				expr();
				State = 151;
				Match(SEMICOLON);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 18029930185752584L) != 0) {
					{
					State = 152;
					condition();
					}
				}

				State = 155;
				Match(SEMICOLON);
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 18014402804708384L) != 0) {
					{
					State = 156;
					statement();
					}
				}

				State = 159;
				Match(RIGHT_PAREN);
				State = 160;
				statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 162;
				Match(WHILE);
				State = 163;
				Match(LEFT_PAREN);
				State = 164;
				condition();
				State = 165;
				Match(RIGHT_PAREN);
				State = 166;
				statement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 168;
				Match(BREAK);
				State = 169;
				Match(SEMICOLON);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 170;
				Match(RETURN);
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 18029930185752584L) != 0) {
					{
					State = 171;
					expr();
					}
				}

				State = 174;
				Match(SEMICOLON);
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 175;
				Match(READ);
				State = 176;
				Match(LEFT_PAREN);
				State = 177;
				designator();
				State = 178;
				Match(RIGHT_PAREN);
				State = 179;
				Match(SEMICOLON);
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 181;
				Match(WRITE);
				State = 182;
				Match(LEFT_PAREN);
				State = 183;
				expr();
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 184;
					Match(COMMA);
					State = 185;
					Match(NUMBER);
					}
				}

				State = 188;
				Match(RIGHT_PAREN);
				State = 189;
				Match(SEMICOLON);
				}
				break;
			case LEFT_BRACE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 191;
				block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 10);
				{
				State = 192;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AlphaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AlphaParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 18, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			expr();
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 196;
				Match(COMMA);
				State = 197;
				expr();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGICAL_OR() { return GetTokens(AlphaParser.LOGICAL_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR(int i) {
			return GetToken(AlphaParser.LOGICAL_OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			condTerm();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOGICAL_OR) {
				{
				{
				State = 204;
				Match(LOGICAL_OR);
				State = 205;
				condTerm();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGICAL_AND() { return GetTokens(AlphaParser.LOGICAL_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND(int i) {
			return GetToken(AlphaParser.LOGICAL_AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 22, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			condFact();
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOGICAL_AND) {
				{
				{
				State = 212;
				Match(LOGICAL_AND);
				State = 213;
				condFact();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 24, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			expr();
			State = 220;
			relop();
			State = 221;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(AlphaParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(AlphaParser.RIGHT_PAREN, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 26, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(LEFT_PAREN);
			State = 224;
			type();
			State = 225;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AlphaParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 227;
				Match(MINUS);
				}
			}

			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 230;
				cast();
				}
				break;
			}
			State = 233;
			term();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 234;
				addop();
				State = 235;
				term();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 30, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			factor();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1924145348608L) != 0) {
				{
				{
				State = 243;
				mulop();
				State = 244;
				factor();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(AlphaParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(AlphaParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AlphaParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_CONST() { return GetToken(AlphaParser.CHAR_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CONST() { return GetToken(AlphaParser.STRING_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(AlphaParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(AlphaParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(AlphaParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 32, RULE_factor);
		int _la;
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				designator();
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 252;
					Match(LEFT_PAREN);
					State = 254;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 18029930185752584L) != 0) {
						{
						State = 253;
						actPars();
						}
					}

					State = 256;
					Match(RIGHT_PAREN);
					}
				}

				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				Match(NUMBER);
				}
				break;
			case CHAR_CONST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260;
				Match(CHAR_CONST);
				}
				break;
			case STRING_CONST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 261;
				Match(STRING_CONST);
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 262;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 6);
				{
				State = 263;
				Match(NEW);
				State = 264;
				ident();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 265;
				Match(LEFT_PAREN);
				State = 266;
				expr();
				State = 267;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(AlphaParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(AlphaParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFT_BRACKET() { return GetTokens(AlphaParser.LEFT_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET(int i) {
			return GetToken(AlphaParser.LEFT_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHT_BRACKET() { return GetTokens(AlphaParser.RIGHT_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET(int i) {
			return GetToken(AlphaParser.RIGHT_BRACKET, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ident();
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT || _la==LEFT_BRACKET) {
				{
				State = 278;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 272;
					Match(DOT);
					State = 273;
					ident();
					}
					break;
				case LEFT_BRACKET:
					{
					State = 274;
					Match(LEFT_BRACKET);
					State = 275;
					expr();
					State = 276;
					Match(RIGHT_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(AlphaParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(AlphaParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(AlphaParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(AlphaParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(AlphaParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(AlphaParser.LESS_OR_EQUALS, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 36, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 264241152L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AlphaParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AlphaParser.MINUS, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 38, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(AlphaParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(AlphaParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(AlphaParser.MOD, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 40, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1924145348608L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AlphaParser.IDENTIFIER, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 42, RULE_ident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(AlphaParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(AlphaParser.RIGHT_BRACKET, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 44, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(LEFT_BRACKET);
			State = 292;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,57,295,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,1,0,3,0,48,8,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,56,8,0,10,0,12,0,
		59,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,71,8,2,10,2,12,2,74,
		9,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,82,8,3,10,3,12,3,85,9,3,1,3,1,3,1,4,1,
		4,3,4,91,8,4,1,4,1,4,1,4,3,4,96,8,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		5,5,5,107,8,5,10,5,12,5,110,9,5,1,6,1,6,3,6,114,8,6,1,7,1,7,1,7,5,7,119,
		8,7,10,7,12,7,122,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,131,8,8,1,8,1,8,
		1,8,3,8,136,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,147,8,8,1,8,1,
		8,1,8,1,8,1,8,3,8,154,8,8,1,8,1,8,3,8,158,8,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,173,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,3,8,187,8,8,1,8,1,8,1,8,1,8,1,8,3,8,194,8,8,1,9,1,9,
		1,9,5,9,199,8,9,10,9,12,9,202,9,9,1,10,1,10,1,10,5,10,207,8,10,10,10,12,
		10,210,9,10,1,11,1,11,1,11,5,11,215,8,11,10,11,12,11,218,9,11,1,12,1,12,
		1,12,1,12,1,13,1,13,1,13,1,13,1,14,3,14,229,8,14,1,14,3,14,232,8,14,1,
		14,1,14,1,14,1,14,5,14,238,8,14,10,14,12,14,241,9,14,1,15,1,15,1,15,1,
		15,5,15,247,8,15,10,15,12,15,250,9,15,1,16,1,16,1,16,3,16,255,8,16,1,16,
		3,16,258,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,270,
		8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,279,8,17,10,17,12,17,282,
		9,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,0,0,23,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,0,4,1,
		0,18,19,1,0,22,27,1,0,36,37,1,0,38,40,318,0,47,1,0,0,0,2,62,1,0,0,0,4,
		66,1,0,0,0,6,77,1,0,0,0,8,90,1,0,0,0,10,100,1,0,0,0,12,111,1,0,0,0,14,
		115,1,0,0,0,16,193,1,0,0,0,18,195,1,0,0,0,20,203,1,0,0,0,22,211,1,0,0,
		0,24,219,1,0,0,0,26,223,1,0,0,0,28,228,1,0,0,0,30,242,1,0,0,0,32,269,1,
		0,0,0,34,271,1,0,0,0,36,283,1,0,0,0,38,285,1,0,0,0,40,287,1,0,0,0,42,289,
		1,0,0,0,44,291,1,0,0,0,46,48,3,2,1,0,47,46,1,0,0,0,47,48,1,0,0,0,48,49,
		1,0,0,0,49,50,5,1,0,0,50,51,3,42,21,0,51,57,5,32,0,0,52,56,3,4,2,0,53,
		56,3,6,3,0,54,56,3,8,4,0,55,52,1,0,0,0,55,53,1,0,0,0,55,54,1,0,0,0,56,
		59,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,60,1,0,0,0,59,57,1,0,0,0,60,
		61,5,33,0,0,61,1,1,0,0,0,62,63,5,4,0,0,63,64,3,42,21,0,64,65,5,5,0,0,65,
		3,1,0,0,0,66,67,3,12,6,0,67,72,3,42,21,0,68,69,5,6,0,0,69,71,3,42,21,0,
		70,68,1,0,0,0,71,74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,75,1,0,0,0,
		74,72,1,0,0,0,75,76,5,5,0,0,76,5,1,0,0,0,77,78,5,1,0,0,78,79,3,42,21,0,
		79,83,5,32,0,0,80,82,3,4,2,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,
		83,84,1,0,0,0,84,86,1,0,0,0,85,83,1,0,0,0,86,87,5,33,0,0,87,7,1,0,0,0,
		88,91,3,12,6,0,89,91,5,2,0,0,90,88,1,0,0,0,90,89,1,0,0,0,91,92,1,0,0,0,
		92,93,3,42,21,0,93,95,5,30,0,0,94,96,3,10,5,0,95,94,1,0,0,0,95,96,1,0,
		0,0,96,97,1,0,0,0,97,98,5,31,0,0,98,99,3,14,7,0,99,9,1,0,0,0,100,101,3,
		12,6,0,101,108,3,42,21,0,102,103,5,6,0,0,103,104,3,12,6,0,104,105,3,42,
		21,0,105,107,1,0,0,0,106,102,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,
		109,1,0,0,0,109,11,1,0,0,0,110,108,1,0,0,0,111,113,3,42,21,0,112,114,3,
		44,22,0,113,112,1,0,0,0,113,114,1,0,0,0,114,13,1,0,0,0,115,120,5,32,0,
		0,116,119,3,4,2,0,117,119,3,16,8,0,118,116,1,0,0,0,118,117,1,0,0,0,119,
		122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,123,1,0,0,0,122,120,1,
		0,0,0,123,124,5,33,0,0,124,15,1,0,0,0,125,135,3,34,17,0,126,127,5,7,0,
		0,127,136,3,28,14,0,128,130,5,30,0,0,129,131,3,18,9,0,130,129,1,0,0,0,
		130,131,1,0,0,0,131,132,1,0,0,0,132,136,5,31,0,0,133,136,5,8,0,0,134,136,
		5,9,0,0,135,126,1,0,0,0,135,128,1,0,0,0,135,133,1,0,0,0,135,134,1,0,0,
		0,136,137,1,0,0,0,137,138,5,5,0,0,138,194,1,0,0,0,139,140,5,10,0,0,140,
		141,5,30,0,0,141,142,3,20,10,0,142,143,5,31,0,0,143,146,3,16,8,0,144,145,
		5,11,0,0,145,147,3,16,8,0,146,144,1,0,0,0,146,147,1,0,0,0,147,194,1,0,
		0,0,148,149,5,12,0,0,149,150,5,30,0,0,150,151,3,28,14,0,151,153,5,5,0,
		0,152,154,3,20,10,0,153,152,1,0,0,0,153,154,1,0,0,0,154,155,1,0,0,0,155,
		157,5,5,0,0,156,158,3,16,8,0,157,156,1,0,0,0,157,158,1,0,0,0,158,159,1,
		0,0,0,159,160,5,31,0,0,160,161,3,16,8,0,161,194,1,0,0,0,162,163,5,13,0,
		0,163,164,5,30,0,0,164,165,3,20,10,0,165,166,5,31,0,0,166,167,3,16,8,0,
		167,194,1,0,0,0,168,169,5,14,0,0,169,194,5,5,0,0,170,172,5,15,0,0,171,
		173,3,28,14,0,172,171,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,194,
		5,5,0,0,175,176,5,16,0,0,176,177,5,30,0,0,177,178,3,34,17,0,178,179,5,
		31,0,0,179,180,5,5,0,0,180,194,1,0,0,0,181,182,5,17,0,0,182,183,5,30,0,
		0,183,186,3,28,14,0,184,185,5,6,0,0,185,187,5,41,0,0,186,184,1,0,0,0,186,
		187,1,0,0,0,187,188,1,0,0,0,188,189,5,31,0,0,189,190,5,5,0,0,190,194,1,
		0,0,0,191,194,3,14,7,0,192,194,5,5,0,0,193,125,1,0,0,0,193,139,1,0,0,0,
		193,148,1,0,0,0,193,162,1,0,0,0,193,168,1,0,0,0,193,170,1,0,0,0,193,175,
		1,0,0,0,193,181,1,0,0,0,193,191,1,0,0,0,193,192,1,0,0,0,194,17,1,0,0,0,
		195,200,3,28,14,0,196,197,5,6,0,0,197,199,3,28,14,0,198,196,1,0,0,0,199,
		202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,19,1,0,0,0,202,200,1,0,
		0,0,203,208,3,22,11,0,204,205,5,29,0,0,205,207,3,22,11,0,206,204,1,0,0,
		0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,21,1,0,0,0,210,208,
		1,0,0,0,211,216,3,24,12,0,212,213,5,28,0,0,213,215,3,24,12,0,214,212,1,
		0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,23,1,0,0,0,218,
		216,1,0,0,0,219,220,3,28,14,0,220,221,3,36,18,0,221,222,3,28,14,0,222,
		25,1,0,0,0,223,224,5,30,0,0,224,225,3,12,6,0,225,226,5,31,0,0,226,27,1,
		0,0,0,227,229,5,37,0,0,228,227,1,0,0,0,228,229,1,0,0,0,229,231,1,0,0,0,
		230,232,3,26,13,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,
		239,3,30,15,0,234,235,3,38,19,0,235,236,3,30,15,0,236,238,1,0,0,0,237,
		234,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,29,1,0,
		0,0,241,239,1,0,0,0,242,248,3,32,16,0,243,244,3,40,20,0,244,245,3,32,16,
		0,245,247,1,0,0,0,246,243,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,
		249,1,0,0,0,249,31,1,0,0,0,250,248,1,0,0,0,251,257,3,34,17,0,252,254,5,
		30,0,0,253,255,3,18,9,0,254,253,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,
		0,256,258,5,31,0,0,257,252,1,0,0,0,257,258,1,0,0,0,258,270,1,0,0,0,259,
		270,5,41,0,0,260,270,5,42,0,0,261,270,5,43,0,0,262,270,7,0,0,0,263,264,
		5,3,0,0,264,270,3,42,21,0,265,266,5,30,0,0,266,267,3,28,14,0,267,268,5,
		31,0,0,268,270,1,0,0,0,269,251,1,0,0,0,269,259,1,0,0,0,269,260,1,0,0,0,
		269,261,1,0,0,0,269,262,1,0,0,0,269,263,1,0,0,0,269,265,1,0,0,0,270,33,
		1,0,0,0,271,280,3,42,21,0,272,273,5,20,0,0,273,279,3,42,21,0,274,275,5,
		34,0,0,275,276,3,28,14,0,276,277,5,35,0,0,277,279,1,0,0,0,278,272,1,0,
		0,0,278,274,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,
		35,1,0,0,0,282,280,1,0,0,0,283,284,7,1,0,0,284,37,1,0,0,0,285,286,7,2,
		0,0,286,39,1,0,0,0,287,288,7,3,0,0,288,41,1,0,0,0,289,290,5,54,0,0,290,
		43,1,0,0,0,291,292,5,34,0,0,292,293,5,35,0,0,293,45,1,0,0,0,31,47,55,57,
		72,83,90,95,108,113,118,120,130,135,146,153,157,172,186,193,200,208,216,
		228,231,239,248,254,257,269,278,280
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
