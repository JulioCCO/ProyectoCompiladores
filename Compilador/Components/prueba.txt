using Data;

class AllProds 
{
  int nPoints;
  char exclaim;
  char caracterEspecial;
  Point estoP;

  class Point {
    int x, y; 
  }
  
  
  Point point;
  
  char[] msg;
  Point[] pArr;
  boolean test1;

  void WriteError (int julio, int[] arreglo)
  {
    int b;
    boolean test1;

   exclaim = 'a';
   caracterEspecial = 'a';

   /* imprimir mensaje error */
   b = 0;
   b = "a"; //error de caracteres invalidos
   test1 = true;

   while(b<len(msg)){write(msg[b]);b++; int cesar;}

   for(j;j<len(msg);j++;){write(msg[j]);}

   write(exclaim);

   while (b > 0) {
      b--;
      if (b < 3 && test1==true) break;	
      write(msg[b], 2);
   }
  }
  
  int GetX (Point p1, int x, char ju) { return p1.x+2; }


  void SetX (int x, Point p2) {
    if (x > -10 && x <= 9 || x == 4*3/4%4+12- -11*(2147483647/(-2147483647+-1)%2)){
      p2.x = x;
	  int camino; 
    }
    else {
      
      WriteError();
    }
    x = 4*3/4%4+12;
  }

  void SetMsg () {
    msg = new char;
    msg[0] = 'E';
    msg[1] = 'r';
    msg[2] = 'r';
    msg[3] = 'r';
    msg[4] = msg[3];
    read(msg[3]) ;    
  }

  void SetPoints ()
  {
    int c;
    pArr = Point[nPoints];
    c = 0;
    while (c < len(pArr)) {
      pArr[c] = new Point;
      pArr[c].x = c;
      pArr[c].y = c;
      c++;
    }
  }

  int prueba(Point x, char w)
  {
      return val.neg[i].algo;
      /*comentario /*mal*/ /*anidado */*/
  }

  void Main ()
  {
    int a;
    SetMsg();
    SetPoints();
    read(a);
    if (a < nPoints) {
      write(GetX(pArr[a]));
      write(pArr[a].y);
    }
    else
      WriteError();
    write('n');

  }

} 


//ANOTAR SUS COMENTARIOS EN MAYUSCULA Y NO QUITAR NADA DE LO QUE VIENE EN EL ARCHIVO SINO SOLO COMENTARLO PERO A LA VEZ COLOCAR EL EQUIVALENTE CORRECTO
//CUALQUIER COSA QUE SEA ERROR MIO AL MOMENTO DE HACER LA PRUEBA, FAVOR CORREGIRLO Y ANOTARLO






































