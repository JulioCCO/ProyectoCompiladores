//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/Compi/Compilador/Compilador/Components\AlphaParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class AlphaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		USING=1, CLASS=2, VOID=3, NEW=4, IF=5, ELSE=6, FOR=7, WHILE=8, BREAK=9, 
		RETURN=10, READ=11, WRITE=12, TRUE=13, FALSE=14, CONST=15, ASSIGN=16, 
		INC=17, DEC=18, DOT=19, COMMA=20, SEMICOLON=21, EQUALS=22, NOT_EQUALS=23, 
		LESS_THAN=24, LESS_OR_EQUALS=25, GREATER_THAN=26, GREATER_OR_EQUALS=27, 
		LOGICAL_AND=28, LOGICAL_OR=29, PLUS=30, MINUS=31, MULT=32, DIV=33, MOD=34, 
		VAR=35, LEFT_PAREN=36, RIGHT_PAREN=37, LEFT_BRACE=38, RIGHT_BRACE=39, 
		LEFT_BRACKET=40, RIGHT_BRACKET=41, NUMBER=42, CHAR_CONST=43, STRING_CONST=44, 
		INT_CONST=45, DOUBLE_CONST=46, BOOL_CONST=47, INT_IDENT=48, CHAR_IDENT=49, 
		DOUBLE_IDENT=50, BOOL_IDENT=51, STRING_IDENT=52, ARRAY=53, IDENTIFIER=54, 
		WS=55, COMMENT=56, LINE_COMMENT=57;
	public const int
		RULE_program = 0, RULE_using = 1, RULE_varDecl = 2, RULE_classDecl = 3, 
		RULE_methodDecl = 4, RULE_formPars = 5, RULE_type = 6, RULE_statement = 7, 
		RULE_block = 8, RULE_actPars = 9, RULE_condition = 10, RULE_condTerm = 11, 
		RULE_condFact = 12, RULE_cast = 13, RULE_expr = 14, RULE_term = 15, RULE_factor = 16, 
		RULE_designator = 17, RULE_relop = 18, RULE_addop = 19, RULE_mulop = 20, 
		RULE_ident = 21, RULE_array = 22;
	public static readonly string[] ruleNames = {
		"program", "using", "varDecl", "classDecl", "methodDecl", "formPars", 
		"type", "statement", "block", "actPars", "condition", "condTerm", "condFact", 
		"cast", "expr", "term", "factor", "designator", "relop", "addop", "mulop", 
		"ident", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'using'", "'class'", "'void'", "'new'", "'if'", "'else'", "'for'", 
		"'while'", "'break'", "'return'", "'read'", "'write'", "'true'", "'false'", 
		"'const'", "'='", "'++'", "'--'", "'.'", "','", "';'", "'=='", "'!='", 
		"'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'var'", "'('", "')'", "'{'", "'}'", "'['", "']'", null, null, 
		null, null, null, null, "'int'", "'char'", "'double'", "'bool'", "'string'", 
		"'array'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "USING", "CLASS", "VOID", "NEW", "IF", "ELSE", "FOR", "WHILE", "BREAK", 
		"RETURN", "READ", "WRITE", "TRUE", "FALSE", "CONST", "ASSIGN", "INC", 
		"DEC", "DOT", "COMMA", "SEMICOLON", "EQUALS", "NOT_EQUALS", "LESS_THAN", 
		"LESS_OR_EQUALS", "GREATER_THAN", "GREATER_OR_EQUALS", "LOGICAL_AND", 
		"LOGICAL_OR", "PLUS", "MINUS", "MULT", "DIV", "MOD", "VAR", "LEFT_PAREN", 
		"RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"NUMBER", "CHAR_CONST", "STRING_CONST", "INT_CONST", "DOUBLE_CONST", "BOOL_CONST", 
		"INT_IDENT", "CHAR_IDENT", "DOUBLE_IDENT", "BOOL_IDENT", "STRING_IDENT", 
		"ARRAY", "IDENTIFIER", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AlphaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AlphaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AlphaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AlphaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(AlphaParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(AlphaParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(AlphaParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AlphaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext[] @using() {
			return GetRuleContexts<UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext @using(int i) {
			return GetRuleContext<UsingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 46;
				@using();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			Match(CLASS);
			State = 53;
			ident();
			State = 54;
			Match(LEFT_BRACE);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 26741291021762572L) != 0) {
				{
				State = 58;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 55;
					varDecl();
					}
					break;
				case 2:
					{
					State = 56;
					classDecl();
					}
					break;
				case 3:
					{
					State = 57;
					methodDecl();
					}
					break;
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 63;
			Match(RIGHT_BRACE);
			State = 64;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(AlphaParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AlphaParser.SEMICOLON, 0); }
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(USING);
			State = 67;
			ident();
			State = 68;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AlphaParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AlphaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AlphaParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			type();
			State = 71;
			ident();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 72;
				Match(COMMA);
				State = 73;
				ident();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 79;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(AlphaParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(AlphaParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(AlphaParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(CLASS);
			State = 82;
			ident();
			State = 83;
			Match(LEFT_BRACE);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 26741222302285824L) != 0) {
				{
				{
				State = 84;
				varDecl();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(AlphaParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(AlphaParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(AlphaParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
			case LEFT_BRACKET:
			case INT_IDENT:
			case CHAR_IDENT:
			case DOUBLE_IDENT:
			case BOOL_IDENT:
			case STRING_IDENT:
			case IDENTIFIER:
				{
				State = 92;
				type();
				}
				break;
			case VOID:
				{
				State = 93;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 96;
			ident();
			State = 97;
			Match(LEFT_PAREN);
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 98;
				formPars();
				}
				break;
			}
			State = 101;
			Match(RIGHT_PAREN);
			State = 102;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AlphaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AlphaParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 10, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			type();
			State = 105;
			ident();
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 106;
				Match(COMMA);
				State = 107;
				type();
				State = 108;
				ident();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext[] array() {
			return GetRuleContexts<ArrayContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array(int i) {
			return GetRuleContext<ArrayContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ident();
			State = 119;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 116;
					array();
					}
					} 
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(AlphaParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(AlphaParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(AlphaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(AlphaParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(AlphaParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(AlphaParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(AlphaParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(AlphaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(AlphaParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(AlphaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(AlphaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(AlphaParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(AlphaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(AlphaParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(AlphaParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AlphaParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AlphaParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
			case INC:
			case DEC:
			case DOT:
			case LEFT_PAREN:
			case LEFT_BRACKET:
			case INT_IDENT:
			case CHAR_IDENT:
			case DOUBLE_IDENT:
			case BOOL_IDENT:
			case STRING_IDENT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				designator();
				State = 132;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					State = 123;
					Match(ASSIGN);
					State = 124;
					expr();
					}
					break;
				case LEFT_PAREN:
					{
					State = 125;
					Match(LEFT_PAREN);
					State = 127;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						State = 126;
						actPars();
						}
						break;
					}
					State = 129;
					Match(RIGHT_PAREN);
					}
					break;
				case INC:
					{
					State = 130;
					Match(INC);
					}
					break;
				case DEC:
					{
					State = 131;
					Match(DEC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 134;
				Match(SEMICOLON);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				Match(IF);
				State = 137;
				Match(LEFT_PAREN);
				State = 138;
				condition();
				State = 139;
				Match(RIGHT_PAREN);
				State = 140;
				statement();
				State = 143;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 141;
					Match(ELSE);
					State = 142;
					statement();
					}
					break;
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 145;
				Match(FOR);
				State = 146;
				Match(LEFT_PAREN);
				State = 147;
				expr();
				State = 148;
				Match(SEMICOLON);
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 27018401499578384L) != 0) {
					{
					State = 149;
					condition();
					}
				}

				State = 152;
				Match(SEMICOLON);
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 26741565899612064L) != 0) {
					{
					State = 153;
					statement();
					}
				}

				State = 156;
				Match(RIGHT_PAREN);
				State = 157;
				statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 159;
				Match(WHILE);
				State = 160;
				Match(LEFT_PAREN);
				State = 161;
				condition();
				State = 162;
				Match(RIGHT_PAREN);
				State = 163;
				statement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 165;
				Match(BREAK);
				State = 166;
				Match(SEMICOLON);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 167;
				Match(RETURN);
				State = 169;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 168;
					expr();
					}
					break;
				}
				State = 171;
				Match(SEMICOLON);
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 172;
				Match(READ);
				State = 173;
				Match(LEFT_PAREN);
				State = 174;
				designator();
				State = 175;
				Match(RIGHT_PAREN);
				State = 176;
				Match(SEMICOLON);
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 178;
				Match(WRITE);
				State = 179;
				Match(LEFT_PAREN);
				State = 180;
				expr();
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 181;
					Match(COMMA);
					State = 182;
					Match(NUMBER);
					}
				}

				State = 185;
				Match(RIGHT_PAREN);
				State = 186;
				Match(SEMICOLON);
				}
				break;
			case LEFT_BRACE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 188;
				block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 10);
				{
				State = 189;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(AlphaParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(AlphaParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(LEFT_BRACE);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 26741565900660640L) != 0) {
				{
				State = 195;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 193;
					varDecl();
					}
					break;
				case 2:
					{
					State = 194;
					statement();
					}
					break;
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 200;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AlphaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AlphaParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 18, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			expr();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 203;
				Match(COMMA);
				State = 204;
				expr();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGICAL_OR() { return GetTokens(AlphaParser.LOGICAL_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR(int i) {
			return GetToken(AlphaParser.LOGICAL_OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			condTerm();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOGICAL_OR) {
				{
				{
				State = 211;
				Match(LOGICAL_OR);
				State = 212;
				condTerm();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGICAL_AND() { return GetTokens(AlphaParser.LOGICAL_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND(int i) {
			return GetToken(AlphaParser.LOGICAL_AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 22, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			condFact();
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOGICAL_AND) {
				{
				{
				State = 219;
				Match(LOGICAL_AND);
				State = 220;
				condFact();
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 24, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			expr();
			State = 227;
			relop();
			State = 228;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(AlphaParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(AlphaParser.RIGHT_PAREN, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 26, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(LEFT_PAREN);
			State = 231;
			type();
			State = 232;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AlphaParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 234;
				Match(MINUS);
				}
				break;
			}
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 237;
				cast();
				}
				break;
			}
			State = 240;
			term();
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 241;
				addop();
				State = 242;
				term();
				}
				}
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 30, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			factor();
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0) {
				{
				{
				State = 250;
				mulop();
				State = 251;
				factor();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(AlphaParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(AlphaParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AlphaParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_CONST() { return GetToken(AlphaParser.CHAR_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CONST() { return GetToken(AlphaParser.STRING_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_CONST() { return GetToken(AlphaParser.INT_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_CONST() { return GetToken(AlphaParser.DOUBLE_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_CONST() { return GetToken(AlphaParser.BOOL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(AlphaParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 32, RULE_factor);
		int _la;
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				designator();
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 259;
					Match(LEFT_PAREN);
					State = 261;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						State = 260;
						actPars();
						}
						break;
					}
					State = 263;
					Match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266;
				Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 267;
				Match(CHAR_CONST);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 268;
				Match(STRING_CONST);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 269;
				Match(INT_CONST);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 270;
				Match(DOUBLE_CONST);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 271;
				Match(BOOL_CONST);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 272;
				Match(NEW);
				State = 273;
				ident();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 274;
				Match(LEFT_PAREN);
				State = 275;
				expr();
				State = 276;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(AlphaParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(AlphaParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFT_BRACKET() { return GetTokens(AlphaParser.LEFT_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET(int i) {
			return GetToken(AlphaParser.LEFT_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHT_BRACKET() { return GetTokens(AlphaParser.RIGHT_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET(int i) {
			return GetToken(AlphaParser.RIGHT_BRACKET, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			ident();
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT || _la==LEFT_BRACKET) {
				{
				State = 287;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 281;
					Match(DOT);
					State = 282;
					ident();
					}
					break;
				case LEFT_BRACKET:
					{
					State = 283;
					Match(LEFT_BRACKET);
					State = 284;
					expr();
					State = 285;
					Match(RIGHT_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(AlphaParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(AlphaParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(AlphaParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(AlphaParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(AlphaParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(AlphaParser.LESS_OR_EQUALS, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 36, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 264241152L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AlphaParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AlphaParser.MINUS, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 38, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(AlphaParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(AlphaParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(AlphaParser.MOD, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 40, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_IDENT() { return GetToken(AlphaParser.INT_IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_IDENT() { return GetToken(AlphaParser.CHAR_IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_IDENT() { return GetToken(AlphaParser.DOUBLE_IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_IDENT() { return GetToken(AlphaParser.BOOL_IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_IDENT() { return GetToken(AlphaParser.STRING_IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AlphaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 42, RULE_ident);
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				Match(INT_IDENT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 299;
				Match(CHAR_IDENT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 300;
				Match(DOUBLE_IDENT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 301;
				Match(BOOL_IDENT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 302;
				Match(STRING_IDENT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 303;
				Match(IDENTIFIER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 305;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 304;
					array();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(AlphaParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(AlphaParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AlphaParser.IDENTIFIER, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 44, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(LEFT_BRACKET);
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 310;
				Match(IDENTIFIER);
				}
			}

			State = 313;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,57,316,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,
		59,8,0,10,0,12,0,62,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,
		2,75,8,2,10,2,12,2,78,9,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,86,8,3,10,3,12,3,
		89,9,3,1,3,1,3,1,4,1,4,3,4,95,8,4,1,4,1,4,1,4,3,4,100,8,4,1,4,1,4,1,4,
		1,5,1,5,1,5,1,5,1,5,1,5,5,5,111,8,5,10,5,12,5,114,9,5,1,6,1,6,5,6,118,
		8,6,10,6,12,6,121,9,6,1,7,1,7,1,7,1,7,1,7,3,7,128,8,7,1,7,1,7,1,7,3,7,
		133,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,144,8,7,1,7,1,7,1,7,1,
		7,1,7,3,7,151,8,7,1,7,1,7,3,7,155,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,3,7,170,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,3,7,184,8,7,1,7,1,7,1,7,1,7,1,7,3,7,191,8,7,1,8,1,8,1,8,5,8,
		196,8,8,10,8,12,8,199,9,8,1,8,1,8,1,9,1,9,1,9,5,9,206,8,9,10,9,12,9,209,
		9,9,1,10,1,10,1,10,5,10,214,8,10,10,10,12,10,217,9,10,1,11,1,11,1,11,5,
		11,222,8,11,10,11,12,11,225,9,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
		13,1,14,3,14,236,8,14,1,14,3,14,239,8,14,1,14,1,14,1,14,1,14,5,14,245,
		8,14,10,14,12,14,248,9,14,1,15,1,15,1,15,1,15,5,15,254,8,15,10,15,12,15,
		257,9,15,1,16,1,16,1,16,3,16,262,8,16,1,16,3,16,265,8,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,279,8,16,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,5,17,288,8,17,10,17,12,17,291,9,17,1,18,1,18,1,
		19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,306,8,21,3,21,
		308,8,21,1,22,1,22,3,22,312,8,22,1,22,1,22,1,22,0,0,23,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,0,3,1,0,22,27,1,0,30,31,
		1,0,32,34,349,0,49,1,0,0,0,2,66,1,0,0,0,4,70,1,0,0,0,6,81,1,0,0,0,8,94,
		1,0,0,0,10,104,1,0,0,0,12,115,1,0,0,0,14,190,1,0,0,0,16,192,1,0,0,0,18,
		202,1,0,0,0,20,210,1,0,0,0,22,218,1,0,0,0,24,226,1,0,0,0,26,230,1,0,0,
		0,28,235,1,0,0,0,30,249,1,0,0,0,32,278,1,0,0,0,34,280,1,0,0,0,36,292,1,
		0,0,0,38,294,1,0,0,0,40,296,1,0,0,0,42,307,1,0,0,0,44,309,1,0,0,0,46,48,
		3,2,1,0,47,46,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,52,
		1,0,0,0,51,49,1,0,0,0,52,53,5,2,0,0,53,54,3,42,21,0,54,60,5,38,0,0,55,
		59,3,4,2,0,56,59,3,6,3,0,57,59,3,8,4,0,58,55,1,0,0,0,58,56,1,0,0,0,58,
		57,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,
		60,1,0,0,0,63,64,5,39,0,0,64,65,5,0,0,1,65,1,1,0,0,0,66,67,5,1,0,0,67,
		68,3,42,21,0,68,69,5,21,0,0,69,3,1,0,0,0,70,71,3,12,6,0,71,76,3,42,21,
		0,72,73,5,20,0,0,73,75,3,42,21,0,74,72,1,0,0,0,75,78,1,0,0,0,76,74,1,0,
		0,0,76,77,1,0,0,0,77,79,1,0,0,0,78,76,1,0,0,0,79,80,5,21,0,0,80,5,1,0,
		0,0,81,82,5,2,0,0,82,83,3,42,21,0,83,87,5,38,0,0,84,86,3,4,2,0,85,84,1,
		0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,87,1,
		0,0,0,90,91,5,39,0,0,91,7,1,0,0,0,92,95,3,12,6,0,93,95,5,3,0,0,94,92,1,
		0,0,0,94,93,1,0,0,0,95,96,1,0,0,0,96,97,3,42,21,0,97,99,5,36,0,0,98,100,
		3,10,5,0,99,98,1,0,0,0,99,100,1,0,0,0,100,101,1,0,0,0,101,102,5,37,0,0,
		102,103,3,16,8,0,103,9,1,0,0,0,104,105,3,12,6,0,105,112,3,42,21,0,106,
		107,5,20,0,0,107,108,3,12,6,0,108,109,3,42,21,0,109,111,1,0,0,0,110,106,
		1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,11,1,0,0,0,
		114,112,1,0,0,0,115,119,3,42,21,0,116,118,3,44,22,0,117,116,1,0,0,0,118,
		121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,13,1,0,0,0,121,119,1,0,
		0,0,122,132,3,34,17,0,123,124,5,16,0,0,124,133,3,28,14,0,125,127,5,36,
		0,0,126,128,3,18,9,0,127,126,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,0,129,
		133,5,37,0,0,130,133,5,17,0,0,131,133,5,18,0,0,132,123,1,0,0,0,132,125,
		1,0,0,0,132,130,1,0,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,135,5,21,0,
		0,135,191,1,0,0,0,136,137,5,5,0,0,137,138,5,36,0,0,138,139,3,20,10,0,139,
		140,5,37,0,0,140,143,3,14,7,0,141,142,5,6,0,0,142,144,3,14,7,0,143,141,
		1,0,0,0,143,144,1,0,0,0,144,191,1,0,0,0,145,146,5,7,0,0,146,147,5,36,0,
		0,147,148,3,28,14,0,148,150,5,21,0,0,149,151,3,20,10,0,150,149,1,0,0,0,
		150,151,1,0,0,0,151,152,1,0,0,0,152,154,5,21,0,0,153,155,3,14,7,0,154,
		153,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,157,5,37,0,0,157,158,3,
		14,7,0,158,191,1,0,0,0,159,160,5,8,0,0,160,161,5,36,0,0,161,162,3,20,10,
		0,162,163,5,37,0,0,163,164,3,14,7,0,164,191,1,0,0,0,165,166,5,9,0,0,166,
		191,5,21,0,0,167,169,5,10,0,0,168,170,3,28,14,0,169,168,1,0,0,0,169,170,
		1,0,0,0,170,171,1,0,0,0,171,191,5,21,0,0,172,173,5,11,0,0,173,174,5,36,
		0,0,174,175,3,34,17,0,175,176,5,37,0,0,176,177,5,21,0,0,177,191,1,0,0,
		0,178,179,5,12,0,0,179,180,5,36,0,0,180,183,3,28,14,0,181,182,5,20,0,0,
		182,184,5,42,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,186,
		5,37,0,0,186,187,5,21,0,0,187,191,1,0,0,0,188,191,3,16,8,0,189,191,5,21,
		0,0,190,122,1,0,0,0,190,136,1,0,0,0,190,145,1,0,0,0,190,159,1,0,0,0,190,
		165,1,0,0,0,190,167,1,0,0,0,190,172,1,0,0,0,190,178,1,0,0,0,190,188,1,
		0,0,0,190,189,1,0,0,0,191,15,1,0,0,0,192,197,5,38,0,0,193,196,3,4,2,0,
		194,196,3,14,7,0,195,193,1,0,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,
		1,0,0,0,197,198,1,0,0,0,198,200,1,0,0,0,199,197,1,0,0,0,200,201,5,39,0,
		0,201,17,1,0,0,0,202,207,3,28,14,0,203,204,5,20,0,0,204,206,3,28,14,0,
		205,203,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,19,
		1,0,0,0,209,207,1,0,0,0,210,215,3,22,11,0,211,212,5,29,0,0,212,214,3,22,
		11,0,213,211,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,
		21,1,0,0,0,217,215,1,0,0,0,218,223,3,24,12,0,219,220,5,28,0,0,220,222,
		3,24,12,0,221,219,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,
		0,0,224,23,1,0,0,0,225,223,1,0,0,0,226,227,3,28,14,0,227,228,3,36,18,0,
		228,229,3,28,14,0,229,25,1,0,0,0,230,231,5,36,0,0,231,232,3,12,6,0,232,
		233,5,37,0,0,233,27,1,0,0,0,234,236,5,31,0,0,235,234,1,0,0,0,235,236,1,
		0,0,0,236,238,1,0,0,0,237,239,3,26,13,0,238,237,1,0,0,0,238,239,1,0,0,
		0,239,240,1,0,0,0,240,246,3,30,15,0,241,242,3,38,19,0,242,243,3,30,15,
		0,243,245,1,0,0,0,244,241,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,
		247,1,0,0,0,247,29,1,0,0,0,248,246,1,0,0,0,249,255,3,32,16,0,250,251,3,
		40,20,0,251,252,3,32,16,0,252,254,1,0,0,0,253,250,1,0,0,0,254,257,1,0,
		0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,31,1,0,0,0,257,255,1,0,0,0,258,
		264,3,34,17,0,259,261,5,36,0,0,260,262,3,18,9,0,261,260,1,0,0,0,261,262,
		1,0,0,0,262,263,1,0,0,0,263,265,5,37,0,0,264,259,1,0,0,0,264,265,1,0,0,
		0,265,279,1,0,0,0,266,279,5,42,0,0,267,279,5,43,0,0,268,279,5,44,0,0,269,
		279,5,45,0,0,270,279,5,46,0,0,271,279,5,47,0,0,272,273,5,4,0,0,273,279,
		3,42,21,0,274,275,5,36,0,0,275,276,3,28,14,0,276,277,5,37,0,0,277,279,
		1,0,0,0,278,258,1,0,0,0,278,266,1,0,0,0,278,267,1,0,0,0,278,268,1,0,0,
		0,278,269,1,0,0,0,278,270,1,0,0,0,278,271,1,0,0,0,278,272,1,0,0,0,278,
		274,1,0,0,0,279,33,1,0,0,0,280,289,3,42,21,0,281,282,5,19,0,0,282,288,
		3,42,21,0,283,284,5,40,0,0,284,285,3,28,14,0,285,286,5,41,0,0,286,288,
		1,0,0,0,287,281,1,0,0,0,287,283,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,
		0,289,290,1,0,0,0,290,35,1,0,0,0,291,289,1,0,0,0,292,293,7,0,0,0,293,37,
		1,0,0,0,294,295,7,1,0,0,295,39,1,0,0,0,296,297,7,2,0,0,297,41,1,0,0,0,
		298,308,5,48,0,0,299,308,5,49,0,0,300,308,5,50,0,0,301,308,5,51,0,0,302,
		308,5,52,0,0,303,308,5,54,0,0,304,306,3,44,22,0,305,304,1,0,0,0,305,306,
		1,0,0,0,306,308,1,0,0,0,307,298,1,0,0,0,307,299,1,0,0,0,307,300,1,0,0,
		0,307,301,1,0,0,0,307,302,1,0,0,0,307,303,1,0,0,0,307,305,1,0,0,0,308,
		43,1,0,0,0,309,311,5,40,0,0,310,312,5,54,0,0,311,310,1,0,0,0,311,312,1,
		0,0,0,312,313,1,0,0,0,313,314,5,41,0,0,314,45,1,0,0,0,34,49,58,60,76,87,
		94,99,112,119,127,132,143,150,154,169,183,190,195,197,207,215,223,235,
		238,246,255,261,264,278,287,289,305,307,311
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
