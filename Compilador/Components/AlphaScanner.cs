//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/Compi/Compilador/Compilador/Components\AlphaScanner.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class AlphaScanner : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, NEW=3, USING=4, SEMICOLON=5, COMMA=6, ASSIGN=7, INC=8, 
		DEC=9, IF=10, ELSE=11, FOR=12, WHILE=13, BREAK=14, RETURN=15, READ=16, 
		WRITE=17, TRUE=18, FALSE=19, DOT=20, CONST=21, EQUALS=22, NOT_EQUALS=23, 
		LESS_THAN=24, LESS_OR_EQUALS=25, GREATER_THAN=26, GREATER_OR_EQUALS=27, 
		LOGICAL_AND=28, LOGICAL_OR=29, LEFT_PAREN=30, RIGHT_PAREN=31, LEFT_BRACE=32, 
		RIGHT_BRACE=33, LEFT_BRACKET=34, RIGHT_BRACKET=35, PLUS=36, MINUS=37, 
		MULT=38, DIV=39, MOD=40, NUMBER=41, CHAR_CONST=42, STRING_CONST=43, INT_CONST=44, 
		FLOAT_CONST=45, DOUBLE_CONST=46, BOOL_CONST=47, INT=48, FLOAT=49, DOUBLE=50, 
		CHAR=51, BOOL=52, ARRAY=53, IDENTIFIER=54, WS=55, COMMENT=56, LINE_COMMENT=57;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CLASS", "VOID", "NEW", "USING", "SEMICOLON", "COMMA", "ASSIGN", "INC", 
		"DEC", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", "READ", "WRITE", 
		"TRUE", "FALSE", "DOT", "CONST", "EQUALS", "NOT_EQUALS", "LESS_THAN", 
		"LESS_OR_EQUALS", "GREATER_THAN", "GREATER_OR_EQUALS", "LOGICAL_AND", 
		"LOGICAL_OR", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE", 
		"LEFT_BRACKET", "RIGHT_BRACKET", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
		"NUMBER", "CHAR_CONST", "STRING_CONST", "INT_CONST", "FLOAT_CONST", "DOUBLE_CONST", 
		"BOOL_CONST", "INT", "FLOAT", "DOUBLE", "CHAR", "BOOL", "ARRAY", "EXPONENT", 
		"IDENTIFIER", "DIGIT", "LETTER", "QUOMARK", "WS", "COMMENT", "LINE_COMMENT"
	};


	public AlphaScanner(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AlphaScanner(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'new'", "'using'", "';'", "','", "'='", "'++'", 
		"'--'", "'if'", "'else'", "'for'", "'while'", "'break'", "'return'", "'read'", 
		"'write'", "'true'", "'false'", "'.'", "'const'", "'=='", "'!='", "'<'", 
		"'<='", "'>'", "'>='", "'&&'", "'||'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "'+'", "'-'", "'*'", "'/'", "'%'", null, null, null, null, null, 
		null, null, "'int'", "'float'", "'double'", "'char'", "'bool'", "'array'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "NEW", "USING", "SEMICOLON", "COMMA", "ASSIGN", 
		"INC", "DEC", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", "READ", 
		"WRITE", "TRUE", "FALSE", "DOT", "CONST", "EQUALS", "NOT_EQUALS", "LESS_THAN", 
		"LESS_OR_EQUALS", "GREATER_THAN", "GREATER_OR_EQUALS", "LOGICAL_AND", 
		"LOGICAL_OR", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE", 
		"LEFT_BRACKET", "RIGHT_BRACKET", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
		"NUMBER", "CHAR_CONST", "STRING_CONST", "INT_CONST", "FLOAT_CONST", "DOUBLE_CONST", 
		"BOOL_CONST", "INT", "FLOAT", "DOUBLE", "CHAR", "BOOL", "ARRAY", "IDENTIFIER", 
		"WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AlphaScanner.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AlphaScanner() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,57,427,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,1,0,1,0,1,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,
		1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
		10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
		13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
		15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,
		18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,
		21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,
		27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,
		33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,
		40,4,40,263,8,40,11,40,12,40,264,1,41,1,41,1,41,1,41,1,41,3,41,272,8,41,
		1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,5,42,282,8,42,10,42,12,42,285,
		9,42,1,42,1,42,1,43,3,43,290,8,43,1,43,4,43,293,8,43,11,43,12,43,294,1,
		44,3,44,298,8,44,1,44,4,44,301,8,44,11,44,12,44,302,1,44,1,44,5,44,307,
		8,44,10,44,12,44,310,9,44,1,44,3,44,313,8,44,1,45,3,45,316,8,45,1,45,4,
		45,319,8,45,11,45,12,45,320,1,45,1,45,5,45,325,8,45,10,45,12,45,328,9,
		45,1,45,3,45,331,8,45,1,46,1,46,3,46,335,8,46,1,47,1,47,1,47,1,47,1,48,
		1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,
		1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,
		1,53,1,53,3,53,372,8,53,1,53,4,53,375,8,53,11,53,12,53,376,1,54,1,54,1,
		54,1,54,5,54,383,8,54,10,54,12,54,386,9,54,1,55,1,55,1,56,1,56,1,57,1,
		57,1,58,4,58,395,8,58,11,58,12,58,396,1,58,1,58,1,59,1,59,1,59,1,59,5,
		59,405,8,59,10,59,12,59,408,9,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,
		60,1,60,5,60,419,8,60,10,60,12,60,422,9,60,1,60,1,60,1,60,1,60,2,406,420,
		0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
		38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,
		50,101,51,103,52,105,53,107,0,109,54,111,0,113,0,115,0,117,55,119,56,121,
		57,1,0,6,2,0,69,69,101,101,2,0,43,43,45,45,1,0,48,57,2,0,65,90,97,122,
		3,0,9,10,13,13,32,32,2,0,10,10,13,13,451,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
		0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
		1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
		0,0,0,105,1,0,0,0,0,109,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,
		0,0,1,123,1,0,0,0,3,129,1,0,0,0,5,134,1,0,0,0,7,138,1,0,0,0,9,144,1,0,
		0,0,11,146,1,0,0,0,13,148,1,0,0,0,15,150,1,0,0,0,17,153,1,0,0,0,19,156,
		1,0,0,0,21,159,1,0,0,0,23,164,1,0,0,0,25,168,1,0,0,0,27,174,1,0,0,0,29,
		180,1,0,0,0,31,187,1,0,0,0,33,192,1,0,0,0,35,198,1,0,0,0,37,203,1,0,0,
		0,39,209,1,0,0,0,41,211,1,0,0,0,43,217,1,0,0,0,45,220,1,0,0,0,47,223,1,
		0,0,0,49,225,1,0,0,0,51,228,1,0,0,0,53,230,1,0,0,0,55,233,1,0,0,0,57,236,
		1,0,0,0,59,239,1,0,0,0,61,241,1,0,0,0,63,243,1,0,0,0,65,245,1,0,0,0,67,
		247,1,0,0,0,69,249,1,0,0,0,71,251,1,0,0,0,73,253,1,0,0,0,75,255,1,0,0,
		0,77,257,1,0,0,0,79,259,1,0,0,0,81,262,1,0,0,0,83,266,1,0,0,0,85,275,1,
		0,0,0,87,289,1,0,0,0,89,297,1,0,0,0,91,315,1,0,0,0,93,334,1,0,0,0,95,336,
		1,0,0,0,97,340,1,0,0,0,99,346,1,0,0,0,101,353,1,0,0,0,103,358,1,0,0,0,
		105,363,1,0,0,0,107,369,1,0,0,0,109,378,1,0,0,0,111,387,1,0,0,0,113,389,
		1,0,0,0,115,391,1,0,0,0,117,394,1,0,0,0,119,400,1,0,0,0,121,414,1,0,0,
		0,123,124,5,99,0,0,124,125,5,108,0,0,125,126,5,97,0,0,126,127,5,115,0,
		0,127,128,5,115,0,0,128,2,1,0,0,0,129,130,5,118,0,0,130,131,5,111,0,0,
		131,132,5,105,0,0,132,133,5,100,0,0,133,4,1,0,0,0,134,135,5,110,0,0,135,
		136,5,101,0,0,136,137,5,119,0,0,137,6,1,0,0,0,138,139,5,117,0,0,139,140,
		5,115,0,0,140,141,5,105,0,0,141,142,5,110,0,0,142,143,5,103,0,0,143,8,
		1,0,0,0,144,145,5,59,0,0,145,10,1,0,0,0,146,147,5,44,0,0,147,12,1,0,0,
		0,148,149,5,61,0,0,149,14,1,0,0,0,150,151,5,43,0,0,151,152,5,43,0,0,152,
		16,1,0,0,0,153,154,5,45,0,0,154,155,5,45,0,0,155,18,1,0,0,0,156,157,5,
		105,0,0,157,158,5,102,0,0,158,20,1,0,0,0,159,160,5,101,0,0,160,161,5,108,
		0,0,161,162,5,115,0,0,162,163,5,101,0,0,163,22,1,0,0,0,164,165,5,102,0,
		0,165,166,5,111,0,0,166,167,5,114,0,0,167,24,1,0,0,0,168,169,5,119,0,0,
		169,170,5,104,0,0,170,171,5,105,0,0,171,172,5,108,0,0,172,173,5,101,0,
		0,173,26,1,0,0,0,174,175,5,98,0,0,175,176,5,114,0,0,176,177,5,101,0,0,
		177,178,5,97,0,0,178,179,5,107,0,0,179,28,1,0,0,0,180,181,5,114,0,0,181,
		182,5,101,0,0,182,183,5,116,0,0,183,184,5,117,0,0,184,185,5,114,0,0,185,
		186,5,110,0,0,186,30,1,0,0,0,187,188,5,114,0,0,188,189,5,101,0,0,189,190,
		5,97,0,0,190,191,5,100,0,0,191,32,1,0,0,0,192,193,5,119,0,0,193,194,5,
		114,0,0,194,195,5,105,0,0,195,196,5,116,0,0,196,197,5,101,0,0,197,34,1,
		0,0,0,198,199,5,116,0,0,199,200,5,114,0,0,200,201,5,117,0,0,201,202,5,
		101,0,0,202,36,1,0,0,0,203,204,5,102,0,0,204,205,5,97,0,0,205,206,5,108,
		0,0,206,207,5,115,0,0,207,208,5,101,0,0,208,38,1,0,0,0,209,210,5,46,0,
		0,210,40,1,0,0,0,211,212,5,99,0,0,212,213,5,111,0,0,213,214,5,110,0,0,
		214,215,5,115,0,0,215,216,5,116,0,0,216,42,1,0,0,0,217,218,5,61,0,0,218,
		219,5,61,0,0,219,44,1,0,0,0,220,221,5,33,0,0,221,222,5,61,0,0,222,46,1,
		0,0,0,223,224,5,60,0,0,224,48,1,0,0,0,225,226,5,60,0,0,226,227,5,61,0,
		0,227,50,1,0,0,0,228,229,5,62,0,0,229,52,1,0,0,0,230,231,5,62,0,0,231,
		232,5,61,0,0,232,54,1,0,0,0,233,234,5,38,0,0,234,235,5,38,0,0,235,56,1,
		0,0,0,236,237,5,124,0,0,237,238,5,124,0,0,238,58,1,0,0,0,239,240,5,40,
		0,0,240,60,1,0,0,0,241,242,5,41,0,0,242,62,1,0,0,0,243,244,5,123,0,0,244,
		64,1,0,0,0,245,246,5,125,0,0,246,66,1,0,0,0,247,248,5,91,0,0,248,68,1,
		0,0,0,249,250,5,93,0,0,250,70,1,0,0,0,251,252,5,43,0,0,252,72,1,0,0,0,
		253,254,5,45,0,0,254,74,1,0,0,0,255,256,5,42,0,0,256,76,1,0,0,0,257,258,
		5,47,0,0,258,78,1,0,0,0,259,260,5,37,0,0,260,80,1,0,0,0,261,263,3,111,
		55,0,262,261,1,0,0,0,263,264,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,
		82,1,0,0,0,266,271,5,39,0,0,267,272,3,113,56,0,268,272,3,111,55,0,269,
		272,5,95,0,0,270,272,3,117,58,0,271,267,1,0,0,0,271,268,1,0,0,0,271,269,
		1,0,0,0,271,270,1,0,0,0,271,272,1,0,0,0,272,273,1,0,0,0,273,274,5,39,0,
		0,274,84,1,0,0,0,275,283,3,115,57,0,276,282,3,113,56,0,277,282,3,81,40,
		0,278,282,3,113,56,0,279,282,5,95,0,0,280,282,3,117,58,0,281,276,1,0,0,
		0,281,277,1,0,0,0,281,278,1,0,0,0,281,279,1,0,0,0,281,280,1,0,0,0,282,
		285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,283,1,
		0,0,0,286,287,3,115,57,0,287,86,1,0,0,0,288,290,3,73,36,0,289,288,1,0,
		0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,293,3,111,55,0,292,291,1,0,0,0,
		293,294,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,88,1,0,0,0,296,298,
		3,73,36,0,297,296,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,301,3,111,
		55,0,300,299,1,0,0,0,301,302,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,
		304,1,0,0,0,304,308,5,46,0,0,305,307,3,111,55,0,306,305,1,0,0,0,307,310,
		1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,
		0,311,313,3,107,53,0,312,311,1,0,0,0,312,313,1,0,0,0,313,90,1,0,0,0,314,
		316,3,73,36,0,315,314,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,319,
		3,111,55,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,1,0,0,0,320,321,1,0,
		0,0,321,322,1,0,0,0,322,326,5,46,0,0,323,325,3,111,55,0,324,323,1,0,0,
		0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,330,1,0,0,0,328,
		326,1,0,0,0,329,331,3,107,53,0,330,329,1,0,0,0,330,331,1,0,0,0,331,92,
		1,0,0,0,332,335,3,35,17,0,333,335,3,37,18,0,334,332,1,0,0,0,334,333,1,
		0,0,0,335,94,1,0,0,0,336,337,5,105,0,0,337,338,5,110,0,0,338,339,5,116,
		0,0,339,96,1,0,0,0,340,341,5,102,0,0,341,342,5,108,0,0,342,343,5,111,0,
		0,343,344,5,97,0,0,344,345,5,116,0,0,345,98,1,0,0,0,346,347,5,100,0,0,
		347,348,5,111,0,0,348,349,5,117,0,0,349,350,5,98,0,0,350,351,5,108,0,0,
		351,352,5,101,0,0,352,100,1,0,0,0,353,354,5,99,0,0,354,355,5,104,0,0,355,
		356,5,97,0,0,356,357,5,114,0,0,357,102,1,0,0,0,358,359,5,98,0,0,359,360,
		5,111,0,0,360,361,5,111,0,0,361,362,5,108,0,0,362,104,1,0,0,0,363,364,
		5,97,0,0,364,365,5,114,0,0,365,366,5,114,0,0,366,367,5,97,0,0,367,368,
		5,121,0,0,368,106,1,0,0,0,369,371,7,0,0,0,370,372,7,1,0,0,371,370,1,0,
		0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,375,3,111,55,0,374,373,1,0,0,0,
		375,376,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,108,1,0,0,0,378,384,
		3,113,56,0,379,383,3,113,56,0,380,383,3,111,55,0,381,383,5,95,0,0,382,
		379,1,0,0,0,382,380,1,0,0,0,382,381,1,0,0,0,383,386,1,0,0,0,384,382,1,
		0,0,0,384,385,1,0,0,0,385,110,1,0,0,0,386,384,1,0,0,0,387,388,7,2,0,0,
		388,112,1,0,0,0,389,390,7,3,0,0,390,114,1,0,0,0,391,392,5,34,0,0,392,116,
		1,0,0,0,393,395,7,4,0,0,394,393,1,0,0,0,395,396,1,0,0,0,396,394,1,0,0,
		0,396,397,1,0,0,0,397,398,1,0,0,0,398,399,6,58,0,0,399,118,1,0,0,0,400,
		401,5,47,0,0,401,402,5,42,0,0,402,406,1,0,0,0,403,405,9,0,0,0,404,403,
		1,0,0,0,405,408,1,0,0,0,406,407,1,0,0,0,406,404,1,0,0,0,407,409,1,0,0,
		0,408,406,1,0,0,0,409,410,5,42,0,0,410,411,5,47,0,0,411,412,1,0,0,0,412,
		413,6,59,0,0,413,120,1,0,0,0,414,415,5,47,0,0,415,416,5,47,0,0,416,420,
		1,0,0,0,417,419,9,0,0,0,418,417,1,0,0,0,419,422,1,0,0,0,420,421,1,0,0,
		0,420,418,1,0,0,0,421,423,1,0,0,0,422,420,1,0,0,0,423,424,7,5,0,0,424,
		425,1,0,0,0,425,426,6,60,0,0,426,122,1,0,0,0,23,0,264,271,281,283,289,
		294,297,302,308,312,315,320,326,330,334,371,376,382,384,396,406,420,1,
		6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
