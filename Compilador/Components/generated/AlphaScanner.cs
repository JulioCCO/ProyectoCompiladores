//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/Compi/Compilador/Compilador/Components\AlphaScanner.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class AlphaScanner : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		USING=1, CLASS=2, VOID=3, NEW=4, IF=5, ELSE=6, FOR=7, WHILE=8, BREAK=9, 
		RETURN=10, READ=11, WRITE=12, TRUE=13, FALSE=14, CONST=15, ASSIGN=16, 
		INC=17, DEC=18, DOT=19, COMMA=20, SEMICOLON=21, EQUALS=22, NOT_EQUALS=23, 
		LESS_THAN=24, LESS_OR_EQUALS=25, GREATER_THAN=26, GREATER_OR_EQUALS=27, 
		LOGICAL_AND=28, LOGICAL_OR=29, PLUS=30, MINUS=31, MULT=32, DIV=33, MOD=34, 
		VAR=35, LEFT_PAREN=36, RIGHT_PAREN=37, LEFT_BRACE=38, RIGHT_BRACE=39, 
		LEFT_BRACKET=40, RIGHT_BRACKET=41, NUMBER=42, CHAR_CONST=43, STRING_CONST=44, 
		INT_CONST=45, DOUBLE_CONST=46, BOOL_CONST=47, ARRAY=48, IDENTIFIER=49, 
		WS=50, COMMENT=51, LINE_COMMENT=52;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"USING", "CLASS", "VOID", "NEW", "IF", "ELSE", "FOR", "WHILE", "BREAK", 
		"RETURN", "READ", "WRITE", "TRUE", "FALSE", "CONST", "ASSIGN", "INC", 
		"DEC", "DOT", "COMMA", "SEMICOLON", "EQUALS", "NOT_EQUALS", "LESS_THAN", 
		"LESS_OR_EQUALS", "GREATER_THAN", "GREATER_OR_EQUALS", "LOGICAL_AND", 
		"LOGICAL_OR", "PLUS", "MINUS", "MULT", "DIV", "MOD", "VAR", "LEFT_PAREN", 
		"RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"NUMBER", "CHAR_CONST", "STRING_CONST", "INT_CONST", "DOUBLE_CONST", "BOOL_CONST", 
		"ARRAY", "IDENTIFIER", "CHAR", "DIGIT", "LETTER", "QUOMARK", "MINIQUOMARK", 
		"SPECIAL", "WS", "COMMENT", "LINE_COMMENT"
	};


	                 public override void NotifyListeners(LexerNoViableAltException e){
	                 this.ErrorListenerDispatch.SyntaxError(this.ErrorOutput, (IRecognizer) this, 0, TokenStartLine, this.TokenStartColumn,"token invalido: '" + this.GetErrorDisplay(this.EmitEOF().InputStream.GetText(Interval.Of(this.TokenStartCharIndex,this.InputStream.Index)))  + "'", (RecognitionException) e);
	                }
	 

	public AlphaScanner(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AlphaScanner(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'using'", "'class'", "'void'", "'new'", "'if'", "'else'", "'for'", 
		"'while'", "'break'", "'return'", "'read'", "'write'", "'true'", "'false'", 
		"'const'", "'='", "'++'", "'--'", "'.'", "','", "';'", "'=='", "'!='", 
		"'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'var'", "'('", "')'", "'{'", "'}'", "'['", "']'", null, null, 
		null, null, null, null, "'array'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "USING", "CLASS", "VOID", "NEW", "IF", "ELSE", "FOR", "WHILE", "BREAK", 
		"RETURN", "READ", "WRITE", "TRUE", "FALSE", "CONST", "ASSIGN", "INC", 
		"DEC", "DOT", "COMMA", "SEMICOLON", "EQUALS", "NOT_EQUALS", "LESS_THAN", 
		"LESS_OR_EQUALS", "GREATER_THAN", "GREATER_OR_EQUALS", "LOGICAL_AND", 
		"LOGICAL_OR", "PLUS", "MINUS", "MULT", "DIV", "MOD", "VAR", "LEFT_PAREN", 
		"RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"NUMBER", "CHAR_CONST", "STRING_CONST", "INT_CONST", "DOUBLE_CONST", "BOOL_CONST", 
		"ARRAY", "IDENTIFIER", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AlphaScanner.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AlphaScanner() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,52,368,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
		1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
		6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
		1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,
		1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,
		1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,
		1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,
		1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,4,41,261,8,41,11,41,12,41,
		262,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,275,8,43,10,
		43,12,43,278,9,43,1,43,1,43,1,44,3,44,283,8,44,1,44,4,44,286,8,44,11,44,
		12,44,287,1,45,3,45,291,8,45,1,45,4,45,294,8,45,11,45,12,45,295,1,45,1,
		45,5,45,300,8,45,10,45,12,45,303,9,45,1,46,1,46,3,46,307,8,46,1,47,1,47,
		1,47,1,47,1,47,1,47,1,48,1,48,1,48,5,48,318,8,48,10,48,12,48,321,9,48,
		1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,4,55,
		336,8,55,11,55,12,55,337,1,55,1,55,1,56,1,56,1,56,1,56,5,56,346,8,56,10,
		56,12,56,349,9,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,5,57,360,
		8,57,10,57,12,57,363,9,57,1,57,1,57,1,57,1,57,1,361,0,58,1,1,3,2,5,3,7,
		4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
		17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
		29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
		41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,0,101,0,103,0,105,
		0,107,0,109,0,111,50,113,51,115,52,1,0,6,3,0,48,57,65,90,97,122,1,0,48,
		57,3,0,65,90,95,95,97,122,338,0,33,47,58,64,91,96,123,126,161,169,171,
		172,174,177,180,180,182,184,187,187,191,191,215,215,247,247,706,709,722,
		735,741,747,749,749,751,767,885,885,894,894,900,901,903,903,1014,1014,
		1154,1154,1370,1375,1417,1418,1421,1423,1470,1470,1472,1472,1475,1475,
		1478,1478,1523,1524,1542,1551,1563,1563,1565,1567,1642,1645,1748,1748,
		1758,1758,1769,1769,1789,1790,1792,1805,2038,2041,2046,2047,2096,2110,
		2142,2142,2184,2184,2404,2405,2416,2416,2546,2547,2554,2555,2557,2557,
		2678,2678,2800,2801,2928,2928,3059,3066,3191,3191,3199,3199,3204,3204,
		3407,3407,3449,3449,3572,3572,3647,3647,3663,3663,3674,3675,3841,3863,
		3866,3871,3892,3892,3894,3894,3896,3896,3898,3901,3973,3973,4030,4037,
		4039,4044,4046,4058,4170,4175,4254,4255,4347,4347,4960,4968,5008,5017,
		5120,5120,5741,5742,5787,5788,5867,5869,5941,5942,6100,6102,6104,6107,
		6144,6154,6464,6464,6468,6469,6622,6655,6686,6687,6816,6822,6824,6829,
		7002,7018,7028,7038,7164,7167,7227,7231,7294,7295,7360,7367,7379,7379,
		8125,8125,8127,8129,8141,8143,8157,8159,8173,8175,8189,8190,8208,8231,
		8240,8286,8314,8318,8330,8334,8352,8384,8448,8449,8451,8454,8456,8457,
		8468,8468,8470,8472,8478,8483,8485,8485,8487,8487,8489,8489,8494,8494,
		8506,8507,8512,8516,8522,8525,8527,8527,8586,8587,8592,9254,9280,9290,
		9372,9449,9472,10101,10132,11123,11126,11157,11159,11263,11493,11498,11513,
		11516,11518,11519,11632,11632,11776,11822,11824,11869,11904,11929,11931,
		12019,12032,12245,12272,12283,12289,12292,12296,12320,12336,12336,12342,
		12343,12349,12351,12443,12444,12448,12448,12539,12539,12688,12689,12694,
		12703,12736,12771,12800,12830,12842,12871,12880,12880,12896,12927,12938,
		12976,12992,13311,19904,19967,42128,42182,42238,42239,42509,42511,42611,
		42611,42622,42622,42738,42743,42752,42774,42784,42785,42889,42890,43048,
		43051,43062,43065,43124,43127,43214,43215,43256,43258,43260,43260,43310,
		43311,43359,43359,43457,43469,43486,43487,43612,43615,43639,43641,43742,
		43743,43760,43761,43867,43867,43882,43883,44011,44011,64297,64297,64434,
		64450,64830,64847,64975,64975,65020,65023,65040,65049,65072,65106,65108,
		65126,65128,65131,65281,65295,65306,65312,65339,65344,65371,65381,65504,
		65510,65512,65518,65532,65533,65792,65794,65847,65855,65913,65929,65932,
		65934,65936,65948,65952,65952,66000,66044,66463,66463,66512,66512,66927,
		66927,67671,67671,67703,67704,67871,67871,67903,67903,68176,68184,68223,
		68223,68296,68296,68336,68342,68409,68415,68505,68508,69293,69293,69461,
		69465,69510,69513,69703,69709,69819,69820,69822,69825,69952,69955,70004,
		70005,70085,70088,70093,70093,70107,70107,70109,70111,70200,70205,70313,
		70313,70731,70735,70746,70747,70749,70749,70854,70854,71105,71127,71233,
		71235,71264,71276,71353,71353,71484,71487,71739,71739,72004,72006,72162,
		72162,72255,72262,72346,72348,72350,72354,72769,72773,72816,72817,73463,
		73464,73685,73713,73727,73727,74864,74868,77809,77810,92782,92783,92917,
		92917,92983,92991,92996,92997,93847,93850,94178,94178,113820,113820,113823,
		113823,118608,118723,118784,119029,119040,119078,119081,119140,119146,
		119148,119171,119172,119180,119209,119214,119274,119296,119361,119365,
		119365,119552,119638,120513,120513,120539,120539,120571,120571,120597,
		120597,120629,120629,120655,120655,120687,120687,120713,120713,120745,
		120745,120771,120771,120832,121343,121399,121402,121453,121460,121462,
		121475,121477,121483,123215,123215,123647,123647,125278,125279,126124,
		126124,126128,126128,126254,126254,126704,126705,126976,127019,127024,
		127123,127136,127150,127153,127167,127169,127183,127185,127221,127245,
		127405,127462,127490,127504,127547,127552,127560,127568,127569,127584,
		127589,127744,128727,128733,128748,128752,128764,128768,128883,128896,
		128984,128992,129003,129008,129008,129024,129035,129040,129095,129104,
		129113,129120,129159,129168,129197,129200,129201,129280,129619,129632,
		129645,129648,129652,129656,129660,129664,129670,129680,129708,129712,
		129722,129728,129733,129744,129753,129760,129767,129776,129782,129792,
		129938,129940,129994,3,0,9,10,13,13,32,32,2,0,10,10,13,13,378,0,1,1,0,
		0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
		0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,111,1,0,0,0,0,
		113,1,0,0,0,0,115,1,0,0,0,1,117,1,0,0,0,3,123,1,0,0,0,5,129,1,0,0,0,7,
		134,1,0,0,0,9,138,1,0,0,0,11,141,1,0,0,0,13,146,1,0,0,0,15,150,1,0,0,0,
		17,156,1,0,0,0,19,162,1,0,0,0,21,169,1,0,0,0,23,174,1,0,0,0,25,180,1,0,
		0,0,27,185,1,0,0,0,29,191,1,0,0,0,31,197,1,0,0,0,33,199,1,0,0,0,35,202,
		1,0,0,0,37,205,1,0,0,0,39,207,1,0,0,0,41,209,1,0,0,0,43,211,1,0,0,0,45,
		214,1,0,0,0,47,217,1,0,0,0,49,219,1,0,0,0,51,222,1,0,0,0,53,224,1,0,0,
		0,55,227,1,0,0,0,57,230,1,0,0,0,59,233,1,0,0,0,61,235,1,0,0,0,63,237,1,
		0,0,0,65,239,1,0,0,0,67,241,1,0,0,0,69,243,1,0,0,0,71,247,1,0,0,0,73,249,
		1,0,0,0,75,251,1,0,0,0,77,253,1,0,0,0,79,255,1,0,0,0,81,257,1,0,0,0,83,
		260,1,0,0,0,85,264,1,0,0,0,87,268,1,0,0,0,89,282,1,0,0,0,91,290,1,0,0,
		0,93,306,1,0,0,0,95,308,1,0,0,0,97,314,1,0,0,0,99,322,1,0,0,0,101,324,
		1,0,0,0,103,326,1,0,0,0,105,328,1,0,0,0,107,330,1,0,0,0,109,332,1,0,0,
		0,111,335,1,0,0,0,113,341,1,0,0,0,115,355,1,0,0,0,117,118,5,117,0,0,118,
		119,5,115,0,0,119,120,5,105,0,0,120,121,5,110,0,0,121,122,5,103,0,0,122,
		2,1,0,0,0,123,124,5,99,0,0,124,125,5,108,0,0,125,126,5,97,0,0,126,127,
		5,115,0,0,127,128,5,115,0,0,128,4,1,0,0,0,129,130,5,118,0,0,130,131,5,
		111,0,0,131,132,5,105,0,0,132,133,5,100,0,0,133,6,1,0,0,0,134,135,5,110,
		0,0,135,136,5,101,0,0,136,137,5,119,0,0,137,8,1,0,0,0,138,139,5,105,0,
		0,139,140,5,102,0,0,140,10,1,0,0,0,141,142,5,101,0,0,142,143,5,108,0,0,
		143,144,5,115,0,0,144,145,5,101,0,0,145,12,1,0,0,0,146,147,5,102,0,0,147,
		148,5,111,0,0,148,149,5,114,0,0,149,14,1,0,0,0,150,151,5,119,0,0,151,152,
		5,104,0,0,152,153,5,105,0,0,153,154,5,108,0,0,154,155,5,101,0,0,155,16,
		1,0,0,0,156,157,5,98,0,0,157,158,5,114,0,0,158,159,5,101,0,0,159,160,5,
		97,0,0,160,161,5,107,0,0,161,18,1,0,0,0,162,163,5,114,0,0,163,164,5,101,
		0,0,164,165,5,116,0,0,165,166,5,117,0,0,166,167,5,114,0,0,167,168,5,110,
		0,0,168,20,1,0,0,0,169,170,5,114,0,0,170,171,5,101,0,0,171,172,5,97,0,
		0,172,173,5,100,0,0,173,22,1,0,0,0,174,175,5,119,0,0,175,176,5,114,0,0,
		176,177,5,105,0,0,177,178,5,116,0,0,178,179,5,101,0,0,179,24,1,0,0,0,180,
		181,5,116,0,0,181,182,5,114,0,0,182,183,5,117,0,0,183,184,5,101,0,0,184,
		26,1,0,0,0,185,186,5,102,0,0,186,187,5,97,0,0,187,188,5,108,0,0,188,189,
		5,115,0,0,189,190,5,101,0,0,190,28,1,0,0,0,191,192,5,99,0,0,192,193,5,
		111,0,0,193,194,5,110,0,0,194,195,5,115,0,0,195,196,5,116,0,0,196,30,1,
		0,0,0,197,198,5,61,0,0,198,32,1,0,0,0,199,200,5,43,0,0,200,201,5,43,0,
		0,201,34,1,0,0,0,202,203,5,45,0,0,203,204,5,45,0,0,204,36,1,0,0,0,205,
		206,5,46,0,0,206,38,1,0,0,0,207,208,5,44,0,0,208,40,1,0,0,0,209,210,5,
		59,0,0,210,42,1,0,0,0,211,212,5,61,0,0,212,213,5,61,0,0,213,44,1,0,0,0,
		214,215,5,33,0,0,215,216,5,61,0,0,216,46,1,0,0,0,217,218,5,60,0,0,218,
		48,1,0,0,0,219,220,5,60,0,0,220,221,5,61,0,0,221,50,1,0,0,0,222,223,5,
		62,0,0,223,52,1,0,0,0,224,225,5,62,0,0,225,226,5,61,0,0,226,54,1,0,0,0,
		227,228,5,38,0,0,228,229,5,38,0,0,229,56,1,0,0,0,230,231,5,124,0,0,231,
		232,5,124,0,0,232,58,1,0,0,0,233,234,5,43,0,0,234,60,1,0,0,0,235,236,5,
		45,0,0,236,62,1,0,0,0,237,238,5,42,0,0,238,64,1,0,0,0,239,240,5,47,0,0,
		240,66,1,0,0,0,241,242,5,37,0,0,242,68,1,0,0,0,243,244,5,118,0,0,244,245,
		5,97,0,0,245,246,5,114,0,0,246,70,1,0,0,0,247,248,5,40,0,0,248,72,1,0,
		0,0,249,250,5,41,0,0,250,74,1,0,0,0,251,252,5,123,0,0,252,76,1,0,0,0,253,
		254,5,125,0,0,254,78,1,0,0,0,255,256,5,91,0,0,256,80,1,0,0,0,257,258,5,
		93,0,0,258,82,1,0,0,0,259,261,3,101,50,0,260,259,1,0,0,0,261,262,1,0,0,
		0,262,260,1,0,0,0,262,263,1,0,0,0,263,84,1,0,0,0,264,265,3,107,53,0,265,
		266,3,99,49,0,266,267,3,107,53,0,267,86,1,0,0,0,268,276,3,105,52,0,269,
		275,3,103,51,0,270,275,3,101,50,0,271,275,3,103,51,0,272,275,3,111,55,
		0,273,275,3,109,54,0,274,269,1,0,0,0,274,270,1,0,0,0,274,271,1,0,0,0,274,
		272,1,0,0,0,274,273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,
		0,0,0,277,279,1,0,0,0,278,276,1,0,0,0,279,280,3,105,52,0,280,88,1,0,0,
		0,281,283,3,61,30,0,282,281,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,
		286,3,101,50,0,285,284,1,0,0,0,286,287,1,0,0,0,287,285,1,0,0,0,287,288,
		1,0,0,0,288,90,1,0,0,0,289,291,3,61,30,0,290,289,1,0,0,0,290,291,1,0,0,
		0,291,293,1,0,0,0,292,294,3,101,50,0,293,292,1,0,0,0,294,295,1,0,0,0,295,
		293,1,0,0,0,295,296,1,0,0,0,296,301,1,0,0,0,297,298,5,46,0,0,298,300,3,
		101,50,0,299,297,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,
		0,302,92,1,0,0,0,303,301,1,0,0,0,304,307,3,25,12,0,305,307,3,27,13,0,306,
		304,1,0,0,0,306,305,1,0,0,0,307,94,1,0,0,0,308,309,5,97,0,0,309,310,5,
		114,0,0,310,311,5,114,0,0,311,312,5,97,0,0,312,313,5,121,0,0,313,96,1,
		0,0,0,314,319,3,103,51,0,315,318,3,103,51,0,316,318,3,101,50,0,317,315,
		1,0,0,0,317,316,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,
		0,320,98,1,0,0,0,321,319,1,0,0,0,322,323,7,0,0,0,323,100,1,0,0,0,324,325,
		7,1,0,0,325,102,1,0,0,0,326,327,7,2,0,0,327,104,1,0,0,0,328,329,5,34,0,
		0,329,106,1,0,0,0,330,331,5,39,0,0,331,108,1,0,0,0,332,333,7,3,0,0,333,
		110,1,0,0,0,334,336,7,4,0,0,335,334,1,0,0,0,336,337,1,0,0,0,337,335,1,
		0,0,0,337,338,1,0,0,0,338,339,1,0,0,0,339,340,6,55,0,0,340,112,1,0,0,0,
		341,342,5,47,0,0,342,343,5,42,0,0,343,347,1,0,0,0,344,346,8,5,0,0,345,
		344,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,350,1,
		0,0,0,349,347,1,0,0,0,350,351,5,42,0,0,351,352,5,47,0,0,352,353,1,0,0,
		0,353,354,6,56,0,0,354,114,1,0,0,0,355,356,5,47,0,0,356,357,5,47,0,0,357,
		361,1,0,0,0,358,360,9,0,0,0,359,358,1,0,0,0,360,363,1,0,0,0,361,362,1,
		0,0,0,361,359,1,0,0,0,362,364,1,0,0,0,363,361,1,0,0,0,364,365,7,5,0,0,
		365,366,1,0,0,0,366,367,6,57,0,0,367,116,1,0,0,0,15,0,262,274,276,282,
		287,290,295,301,306,317,319,337,347,361,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated
