//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Proyecto Compi/ProyectoCompiladores/Compilador\Parser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMENT=2, LINE_COMMENT=3, CLASS=1, NAMESPACE=2, INTERFACE=3, ENUM=4, 
		STRUCT=5, VOID=6, NEW=7, THIS=8, BASE=9, IF=10, ELSE=11, WHILE=12, DO=13, 
		FOR=14, FOREACH=15, IN=16, RETURN=17, SWITCH=18, CASE=19, DEFAULT=20, 
		TRY=21, CATCH=22, FINALLY=23, THROW=24, THROWS=25, PRIVATE=26, PROTECTED=27, 
		PUBLIC=28, INTERNAL=29, ABSTRACT=30, VIRTUAL=31, OVERRIDE=32, STATIC=33, 
		CONST=34, READONLY=35, GET=36, SET=37, ADD=38, REMOVE=39, EVENT=40, AS=41, 
		IS=42, NULL=43, INT_LITERAL=44, HEX_LITERAL=45, FLOAT_LITERAL=46, DOUBLE_LITERAL=47, 
		CHAR_LITERAL=48, STRING_LITERAL=49, IDENTIFIER=50, PLUS=51, MINUS=52, 
		MULTIPLY=53, DIVIDE=54, MODULO=55, ASSIGN=56, PLUS_ASSIGN=57, MINUS_ASSIGN=58, 
		MULTIPLY_ASSIGN=59, DIVIDE_ASSIGN=60, MODULO_ASSIGN=61, EQUALS=62, NOT_EQUALS=63, 
		LESS_THAN=64, GREATER_THAN=65, LESS_OR_EQUALS=66, GREATER_OR_EQUALS=67, 
		LOGICAL_AND=68, LOGICAL_OR=69, LOGICAL_NOT=70, BITWISE_AND=71, BITWISE_OR=72, 
		BITWISE_NOT=73, BITWISE_XOR=74, LEFT_SHIFT=75, RIGHT_SHIFT=76, CONDITIONAL_OPERATOR=77, 
		NULL_COALESCE_OPERATOR=78, INC=79, DEC=80, DOT=81, ELLIPSIS=82, COLON=83, 
		SEMICOLON=84, COMMA=85, ARROW=86, LEFT_PAREN=87, RIGHT_PAREN=88, LEFT_BRACE=89, 
		RIGHT_BRACE=90, LEFT_SQUARE_BRACKET=91, RIGHT_SQUARE_BRACKET=92, USING=93, 
		INCREMENT=94, DECREMENT=95, BREAK=96, READ=97, WRITE=98, NUMBER=99, OR=100, 
		AND=101, CHAR_CONST=102, STRING_CONST=103, TRUE=104, FALSE=105, LEFT_BRACKET=106, 
		RIGHT_BRACKET=107, EQ=108, NE=109, GT=110, GE=111, LT=112, LE=113, MULT=114, 
		DIV=115, MOD=116;
	public const int
		RULE_program = 0, RULE_usingClause = 1, RULE_varDecl = 2, RULE_classDecl = 3, 
		RULE_methodDecl = 4, RULE_formPars = 5, RULE_type = 6, RULE_block = 7, 
		RULE_statement = 8, RULE_actPars = 9, RULE_condition = 10, RULE_condTerm = 11, 
		RULE_condFact = 12, RULE_cast = 13, RULE_expr = 14, RULE_term = 15, RULE_factor = 16, 
		RULE_designator = 17, RULE_relop = 18, RULE_addop = 19, RULE_mulop = 20, 
		RULE_identifier = 21, RULE_array = 22;
	public static readonly string[] ruleNames = {
		"program", "usingClause", "varDecl", "classDecl", "methodDecl", "formPars", 
		"type", "block", "statement", "actPars", "condition", "condTerm", "condFact", 
		"cast", "expr", "term", "factor", "designator", "relop", "addop", "mulop", 
		"identifier", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'namespace'", "'interface'", "'enum'", "'struct'", "'void'", 
		"'new'", "'this'", "'base'", "'if'", "'else'", "'while'", "'do'", "'for'", 
		"'foreach'", "'in'", "'return'", "'switch'", "'case'", "'default'", "'try'", 
		"'catch'", "'finally'", "'throw'", "'throws'", "'private'", "'protected'", 
		"'public'", "'internal'", "'abstract'", "'virtual'", "'override'", "'static'", 
		"'const'", "'readonly'", "'get'", "'set'", "'add'", "'remove'", "'event'", 
		"'as'", "'is'", "'null'", null, null, null, null, null, null, null, "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'!'", "'&'", 
		"'|'", "'~'", "'^'", "'<<'", "'>>'", "'?'", "'??'", "'++'", "'--'", "'.'", 
		"'...'", "':'", "';'", "','", "'->'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "LINE_COMMENT", "ENUM", "STRUCT", "VOID", "NEW", 
		"THIS", "BASE", "IF", "ELSE", "WHILE", "DO", "FOR", "FOREACH", "IN", "RETURN", 
		"SWITCH", "CASE", "DEFAULT", "TRY", "CATCH", "FINALLY", "THROW", "THROWS", 
		"PRIVATE", "PROTECTED", "PUBLIC", "INTERNAL", "ABSTRACT", "VIRTUAL", "OVERRIDE", 
		"STATIC", "CONST", "READONLY", "GET", "SET", "ADD", "REMOVE", "EVENT", 
		"AS", "IS", "NULL", "INT_LITERAL", "HEX_LITERAL", "FLOAT_LITERAL", "DOUBLE_LITERAL", 
		"CHAR_LITERAL", "STRING_LITERAL", "IDENTIFIER", "PLUS", "MINUS", "MULTIPLY", 
		"DIVIDE", "MODULO", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULTIPLY_ASSIGN", 
		"DIVIDE_ASSIGN", "MODULO_ASSIGN", "EQUALS", "NOT_EQUALS", "LESS_THAN", 
		"GREATER_THAN", "LESS_OR_EQUALS", "GREATER_OR_EQUALS", "LOGICAL_AND", 
		"LOGICAL_OR", "LOGICAL_NOT", "BITWISE_AND", "BITWISE_OR", "BITWISE_NOT", 
		"BITWISE_XOR", "LEFT_SHIFT", "RIGHT_SHIFT", "CONDITIONAL_OPERATOR", "NULL_COALESCE_OPERATOR", 
		"INC", "DEC", "DOT", "ELLIPSIS", "COLON", "SEMICOLON", "COMMA", "ARROW", 
		"LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_SQUARE_BRACKET", 
		"RIGHT_SQUARE_BRACKET", "USING", "INCREMENT", "DECREMENT", "BREAK", "READ", 
		"WRITE", "NUMBER", "OR", "AND", "CHAR_CONST", "STRING_CONST", "TRUE", 
		"FALSE", "LEFT_BRACKET", "RIGHT_BRACKET", "EQ", "NE", "GT", "GE", "LT", 
		"LE", "MULT", "DIV", "MOD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ParserParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(ParserParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(ParserParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingClauseContext usingClause() {
			return GetRuleContext<UsingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 46;
				usingClause();
				}
			}

			State = 49;
			Match(WS);
			State = 50;
			identifier();
			State = 51;
			Match(LEFT_BRACE);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1125899906842690L) != 0) {
				{
				State = 55;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 52;
					varDecl();
					}
					break;
				case 2:
					{
					State = 53;
					classDecl();
					}
					break;
				case 3:
					{
					State = 54;
					methodDecl();
					}
					break;
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 60;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(ParserParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserParser.SEMICOLON, 0); }
		public UsingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingClause; } }
	}

	[RuleVersion(0)]
	public UsingClauseContext usingClause() {
		UsingClauseContext _localctx = new UsingClauseContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(USING);
			State = 63;
			identifier();
			State = 64;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ParserParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			type();
			State = 67;
			identifier();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 68;
				Match(COMMA);
				State = 69;
				identifier();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 75;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ParserParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(ParserParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(ParserParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(WS);
			State = 78;
			identifier();
			State = 79;
			Match(LEFT_BRACE);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 80;
				varDecl();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(ParserParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(ParserParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(ParserParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 88;
				type();
				}
				break;
			case VOID:
				{
				State = 89;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 92;
			identifier();
			State = 93;
			Match(LEFT_PAREN);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 94;
				formPars();
				}
			}

			State = 97;
			Match(RIGHT_PAREN);
			State = 98;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 10, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			type();
			State = 101;
			identifier();
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 102;
				Match(COMMA);
				State = 103;
				type();
				State = 104;
				identifier();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			identifier();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 112;
				array();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(ParserParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(ParserParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(LEFT_BRACE);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1125899906995200L) != 0 || (((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 28705L) != 0) {
				{
				State = 118;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 116;
					varDecl();
					}
					break;
				case 2:
					{
					State = 117;
					statement();
					}
					break;
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 123;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(ParserParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(ParserParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ParserParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(ParserParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(ParserParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(ParserParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(ParserParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ParserParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ParserParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ParserParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ParserParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(ParserParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ParserParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(ParserParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(ParserParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ParserParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ParserParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		int _la;
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				designator();
				State = 135;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					State = 126;
					Match(ASSIGN);
					State = 127;
					expr();
					}
					break;
				case LEFT_PAREN:
					{
					State = 128;
					Match(LEFT_PAREN);
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 5629499534213248L) != 0 || (((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 495617L) != 0) {
						{
						State = 129;
						actPars();
						}
					}

					State = 132;
					Match(RIGHT_PAREN);
					}
					break;
				case INCREMENT:
					{
					State = 133;
					Match(INCREMENT);
					}
					break;
				case DECREMENT:
					{
					State = 134;
					Match(DECREMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 137;
				Match(SEMICOLON);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				Match(IF);
				State = 140;
				Match(LEFT_PAREN);
				State = 141;
				condition();
				State = 142;
				Match(RIGHT_PAREN);
				State = 143;
				statement();
				State = 146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 144;
					Match(ELSE);
					State = 145;
					statement();
					}
					break;
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 148;
				Match(FOR);
				State = 149;
				Match(LEFT_PAREN);
				State = 150;
				expr();
				State = 151;
				Match(SEMICOLON);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 5629499534213248L) != 0 || (((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 495617L) != 0) {
					{
					State = 152;
					condition();
					}
				}

				State = 155;
				Match(SEMICOLON);
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1125899906995200L) != 0 || (((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 28705L) != 0) {
					{
					State = 156;
					statement();
					}
				}

				State = 159;
				Match(RIGHT_PAREN);
				State = 160;
				statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 162;
				Match(WHILE);
				State = 163;
				Match(LEFT_PAREN);
				State = 164;
				condition();
				State = 165;
				Match(RIGHT_PAREN);
				State = 166;
				statement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 168;
				Match(BREAK);
				State = 169;
				Match(SEMICOLON);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 170;
				Match(RETURN);
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 5629499534213248L) != 0 || (((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 495617L) != 0) {
					{
					State = 171;
					expr();
					}
				}

				State = 174;
				Match(SEMICOLON);
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 175;
				Match(READ);
				State = 176;
				Match(LEFT_PAREN);
				State = 177;
				designator();
				State = 178;
				Match(RIGHT_PAREN);
				State = 179;
				Match(SEMICOLON);
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 181;
				Match(WRITE);
				State = 182;
				Match(LEFT_PAREN);
				State = 183;
				expr();
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 184;
					Match(COMMA);
					State = 185;
					Match(NUMBER);
					}
				}

				State = 188;
				Match(RIGHT_PAREN);
				State = 189;
				Match(SEMICOLON);
				}
				break;
			case LEFT_BRACE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 191;
				block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 10);
				{
				State = 192;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 18, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			expr();
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 196;
				Match(COMMA);
				State = 197;
				expr();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ParserParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ParserParser.OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			condTerm();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 204;
				Match(OR);
				State = 205;
				condTerm();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(ParserParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(ParserParser.AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 22, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			condFact();
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 212;
				Match(AND);
				State = 213;
				condFact();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 24, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			expr();
			State = 220;
			relop();
			State = 221;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(ParserParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(ParserParser.RIGHT_PAREN, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 26, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(LEFT_PAREN);
			State = 224;
			type();
			State = 225;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ParserParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 227;
				Match(MINUS);
				}
			}

			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 230;
				cast();
				}
				break;
			}
			State = 233;
			term();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 234;
				addop();
				State = 235;
				term();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 30, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			factor();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & 7L) != 0) {
				{
				{
				State = 243;
				mulop();
				State = 244;
				factor();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(ParserParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(ParserParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ParserParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_CONST() { return GetToken(ParserParser.CHAR_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CONST() { return GetToken(ParserParser.STRING_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ParserParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ParserParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ParserParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 32, RULE_factor);
		int _la;
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				designator();
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 252;
					Match(LEFT_PAREN);
					State = 254;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 5629499534213248L) != 0 || (((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 495617L) != 0) {
						{
						State = 253;
						actPars();
						}
					}

					State = 256;
					Match(RIGHT_PAREN);
					}
				}

				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				Match(NUMBER);
				}
				break;
			case CHAR_CONST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260;
				Match(CHAR_CONST);
				}
				break;
			case STRING_CONST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 261;
				Match(STRING_CONST);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 262;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 263;
				Match(FALSE);
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 7);
				{
				State = 264;
				Match(NEW);
				State = 265;
				identifier();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 266;
				Match(LEFT_PAREN);
				State = 267;
				expr();
				State = 268;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ParserParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ParserParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFT_BRACKET() { return GetTokens(ParserParser.LEFT_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET(int i) {
			return GetToken(ParserParser.LEFT_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHT_BRACKET() { return GetTokens(ParserParser.RIGHT_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET(int i) {
			return GetToken(ParserParser.RIGHT_BRACKET, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			identifier();
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT || _la==LEFT_BRACKET) {
				{
				State = 279;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 273;
					Match(DOT);
					State = 274;
					identifier();
					}
					break;
				case LEFT_BRACKET:
					{
					State = 275;
					Match(LEFT_BRACKET);
					State = 276;
					expr();
					State = 277;
					Match(RIGHT_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ParserParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(ParserParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ParserParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(ParserParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ParserParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(ParserParser.LE, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 36, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			_la = TokenStream.LA(1);
			if ( !((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & 63L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ParserParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ParserParser.MINUS, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 38, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(ParserParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ParserParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ParserParser.MOD, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 40, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			_la = TokenStream.LA(1);
			if ( !((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & 7L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(ParserParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(ParserParser.RIGHT_BRACKET, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 44, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(LEFT_BRACKET);
			State = 293;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,116,296,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,1,0,3,0,48,8,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,56,8,0,10,0,12,0,
		59,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,71,8,2,10,2,12,2,74,
		9,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,82,8,3,10,3,12,3,85,9,3,1,3,1,3,1,4,1,
		4,3,4,91,8,4,1,4,1,4,1,4,3,4,96,8,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		5,5,5,107,8,5,10,5,12,5,110,9,5,1,6,1,6,3,6,114,8,6,1,7,1,7,1,7,5,7,119,
		8,7,10,7,12,7,122,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,131,8,8,1,8,1,8,
		1,8,3,8,136,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,147,8,8,1,8,1,
		8,1,8,1,8,1,8,3,8,154,8,8,1,8,1,8,3,8,158,8,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,173,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,3,8,187,8,8,1,8,1,8,1,8,1,8,1,8,3,8,194,8,8,1,9,1,9,
		1,9,5,9,199,8,9,10,9,12,9,202,9,9,1,10,1,10,1,10,5,10,207,8,10,10,10,12,
		10,210,9,10,1,11,1,11,1,11,5,11,215,8,11,10,11,12,11,218,9,11,1,12,1,12,
		1,12,1,12,1,13,1,13,1,13,1,13,1,14,3,14,229,8,14,1,14,3,14,232,8,14,1,
		14,1,14,1,14,1,14,5,14,238,8,14,10,14,12,14,241,9,14,1,15,1,15,1,15,1,
		15,5,15,247,8,15,10,15,12,15,250,9,15,1,16,1,16,1,16,3,16,255,8,16,1,16,
		3,16,258,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,
		16,271,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,280,8,17,10,17,12,
		17,283,9,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,
		0,0,23,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		0,3,1,0,108,113,1,0,51,52,1,0,114,116,320,0,47,1,0,0,0,2,62,1,0,0,0,4,
		66,1,0,0,0,6,77,1,0,0,0,8,90,1,0,0,0,10,100,1,0,0,0,12,111,1,0,0,0,14,
		115,1,0,0,0,16,193,1,0,0,0,18,195,1,0,0,0,20,203,1,0,0,0,22,211,1,0,0,
		0,24,219,1,0,0,0,26,223,1,0,0,0,28,228,1,0,0,0,30,242,1,0,0,0,32,270,1,
		0,0,0,34,272,1,0,0,0,36,284,1,0,0,0,38,286,1,0,0,0,40,288,1,0,0,0,42,290,
		1,0,0,0,44,292,1,0,0,0,46,48,3,2,1,0,47,46,1,0,0,0,47,48,1,0,0,0,48,49,
		1,0,0,0,49,50,5,1,0,0,50,51,3,42,21,0,51,57,5,89,0,0,52,56,3,4,2,0,53,
		56,3,6,3,0,54,56,3,8,4,0,55,52,1,0,0,0,55,53,1,0,0,0,55,54,1,0,0,0,56,
		59,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,60,1,0,0,0,59,57,1,0,0,0,60,
		61,5,90,0,0,61,1,1,0,0,0,62,63,5,93,0,0,63,64,3,42,21,0,64,65,5,84,0,0,
		65,3,1,0,0,0,66,67,3,12,6,0,67,72,3,42,21,0,68,69,5,85,0,0,69,71,3,42,
		21,0,70,68,1,0,0,0,71,74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,75,1,0,
		0,0,74,72,1,0,0,0,75,76,5,84,0,0,76,5,1,0,0,0,77,78,5,1,0,0,78,79,3,42,
		21,0,79,83,5,89,0,0,80,82,3,4,2,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,
		0,0,0,83,84,1,0,0,0,84,86,1,0,0,0,85,83,1,0,0,0,86,87,5,90,0,0,87,7,1,
		0,0,0,88,91,3,12,6,0,89,91,5,6,0,0,90,88,1,0,0,0,90,89,1,0,0,0,91,92,1,
		0,0,0,92,93,3,42,21,0,93,95,5,87,0,0,94,96,3,10,5,0,95,94,1,0,0,0,95,96,
		1,0,0,0,96,97,1,0,0,0,97,98,5,88,0,0,98,99,3,14,7,0,99,9,1,0,0,0,100,101,
		3,12,6,0,101,108,3,42,21,0,102,103,5,85,0,0,103,104,3,12,6,0,104,105,3,
		42,21,0,105,107,1,0,0,0,106,102,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,
		0,108,109,1,0,0,0,109,11,1,0,0,0,110,108,1,0,0,0,111,113,3,42,21,0,112,
		114,3,44,22,0,113,112,1,0,0,0,113,114,1,0,0,0,114,13,1,0,0,0,115,120,5,
		89,0,0,116,119,3,4,2,0,117,119,3,16,8,0,118,116,1,0,0,0,118,117,1,0,0,
		0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,123,1,0,0,0,122,
		120,1,0,0,0,123,124,5,90,0,0,124,15,1,0,0,0,125,135,3,34,17,0,126,127,
		5,56,0,0,127,136,3,28,14,0,128,130,5,87,0,0,129,131,3,18,9,0,130,129,1,
		0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,136,5,88,0,0,133,136,5,94,0,
		0,134,136,5,95,0,0,135,126,1,0,0,0,135,128,1,0,0,0,135,133,1,0,0,0,135,
		134,1,0,0,0,136,137,1,0,0,0,137,138,5,84,0,0,138,194,1,0,0,0,139,140,5,
		10,0,0,140,141,5,87,0,0,141,142,3,20,10,0,142,143,5,88,0,0,143,146,3,16,
		8,0,144,145,5,11,0,0,145,147,3,16,8,0,146,144,1,0,0,0,146,147,1,0,0,0,
		147,194,1,0,0,0,148,149,5,14,0,0,149,150,5,87,0,0,150,151,3,28,14,0,151,
		153,5,84,0,0,152,154,3,20,10,0,153,152,1,0,0,0,153,154,1,0,0,0,154,155,
		1,0,0,0,155,157,5,84,0,0,156,158,3,16,8,0,157,156,1,0,0,0,157,158,1,0,
		0,0,158,159,1,0,0,0,159,160,5,88,0,0,160,161,3,16,8,0,161,194,1,0,0,0,
		162,163,5,12,0,0,163,164,5,87,0,0,164,165,3,20,10,0,165,166,5,88,0,0,166,
		167,3,16,8,0,167,194,1,0,0,0,168,169,5,96,0,0,169,194,5,84,0,0,170,172,
		5,17,0,0,171,173,3,28,14,0,172,171,1,0,0,0,172,173,1,0,0,0,173,174,1,0,
		0,0,174,194,5,84,0,0,175,176,5,97,0,0,176,177,5,87,0,0,177,178,3,34,17,
		0,178,179,5,88,0,0,179,180,5,84,0,0,180,194,1,0,0,0,181,182,5,98,0,0,182,
		183,5,87,0,0,183,186,3,28,14,0,184,185,5,85,0,0,185,187,5,99,0,0,186,184,
		1,0,0,0,186,187,1,0,0,0,187,188,1,0,0,0,188,189,5,88,0,0,189,190,5,84,
		0,0,190,194,1,0,0,0,191,194,3,14,7,0,192,194,5,84,0,0,193,125,1,0,0,0,
		193,139,1,0,0,0,193,148,1,0,0,0,193,162,1,0,0,0,193,168,1,0,0,0,193,170,
		1,0,0,0,193,175,1,0,0,0,193,181,1,0,0,0,193,191,1,0,0,0,193,192,1,0,0,
		0,194,17,1,0,0,0,195,200,3,28,14,0,196,197,5,85,0,0,197,199,3,28,14,0,
		198,196,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,19,
		1,0,0,0,202,200,1,0,0,0,203,208,3,22,11,0,204,205,5,100,0,0,205,207,3,
		22,11,0,206,204,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,
		0,209,21,1,0,0,0,210,208,1,0,0,0,211,216,3,24,12,0,212,213,5,101,0,0,213,
		215,3,24,12,0,214,212,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,
		1,0,0,0,217,23,1,0,0,0,218,216,1,0,0,0,219,220,3,28,14,0,220,221,3,36,
		18,0,221,222,3,28,14,0,222,25,1,0,0,0,223,224,5,87,0,0,224,225,3,12,6,
		0,225,226,5,88,0,0,226,27,1,0,0,0,227,229,5,52,0,0,228,227,1,0,0,0,228,
		229,1,0,0,0,229,231,1,0,0,0,230,232,3,26,13,0,231,230,1,0,0,0,231,232,
		1,0,0,0,232,233,1,0,0,0,233,239,3,30,15,0,234,235,3,38,19,0,235,236,3,
		30,15,0,236,238,1,0,0,0,237,234,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,
		0,239,240,1,0,0,0,240,29,1,0,0,0,241,239,1,0,0,0,242,248,3,32,16,0,243,
		244,3,40,20,0,244,245,3,32,16,0,245,247,1,0,0,0,246,243,1,0,0,0,247,250,
		1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,31,1,0,0,0,250,248,1,0,0,0,
		251,257,3,34,17,0,252,254,5,87,0,0,253,255,3,18,9,0,254,253,1,0,0,0,254,
		255,1,0,0,0,255,256,1,0,0,0,256,258,5,88,0,0,257,252,1,0,0,0,257,258,1,
		0,0,0,258,271,1,0,0,0,259,271,5,99,0,0,260,271,5,102,0,0,261,271,5,103,
		0,0,262,271,5,104,0,0,263,271,5,105,0,0,264,265,5,7,0,0,265,271,3,42,21,
		0,266,267,5,87,0,0,267,268,3,28,14,0,268,269,5,88,0,0,269,271,1,0,0,0,
		270,251,1,0,0,0,270,259,1,0,0,0,270,260,1,0,0,0,270,261,1,0,0,0,270,262,
		1,0,0,0,270,263,1,0,0,0,270,264,1,0,0,0,270,266,1,0,0,0,271,33,1,0,0,0,
		272,281,3,42,21,0,273,274,5,81,0,0,274,280,3,42,21,0,275,276,5,106,0,0,
		276,277,3,28,14,0,277,278,5,107,0,0,278,280,1,0,0,0,279,273,1,0,0,0,279,
		275,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,35,1,0,
		0,0,283,281,1,0,0,0,284,285,7,0,0,0,285,37,1,0,0,0,286,287,7,1,0,0,287,
		39,1,0,0,0,288,289,7,2,0,0,289,41,1,0,0,0,290,291,5,50,0,0,291,43,1,0,
		0,0,292,293,5,106,0,0,293,294,5,107,0,0,294,45,1,0,0,0,31,47,55,57,72,
		83,90,95,108,113,118,120,130,135,146,153,157,172,186,193,200,208,216,228,
		231,239,248,254,257,270,279,281
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated
