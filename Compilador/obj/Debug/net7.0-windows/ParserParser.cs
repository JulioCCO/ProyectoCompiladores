//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Proyecto Compi\ProyectoCompiladores\Compilador\Parser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compilador {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class ParserParser : Parser {
	public const int
		WS=1, COMMENT=2, LINE_COMMENT=3, CLASS=1, NAMESPACE=2, INTERFACE=3, ENUM=4, 
		STRUCT=5, VOID=6, NEW=7, THIS=8, BASE=9, IF=10, ELSE=11, WHILE=12, DO=13, 
		FOR=14, FOREACH=15, IN=16, RETURN=17, SWITCH=18, CASE=19, DEFAULT=20, 
		TRY=21, CATCH=22, FINALLY=23, THROW=24, THROWS=25, PRIVATE=26, PROTECTED=27, 
		PUBLIC=28, INTERNAL=29, ABSTRACT=30, VIRTUAL=31, OVERRIDE=32, STATIC=33, 
		CONST=34, READONLY=35, GET=36, SET=37, ADD=38, REMOVE=39, EVENT=40, AS=41, 
		IS=42, NULL=43, INT_LITERAL=44, HEX_LITERAL=45, FLOAT_LITERAL=46, DOUBLE_LITERAL=47, 
		CHAR_LITERAL=48, STRING_LITERAL=49, IDENTIFIER=50, PLUS=51, MINUS=52, 
		MULTIPLY=53, DIVIDE=54, MODULO=55, ASSIGN=56, PLUS_ASSIGN=57, MINUS_ASSIGN=58, 
		MULTIPLY_ASSIGN=59, DIVIDE_ASSIGN=60, MODULO_ASSIGN=61, EQUALS=62, NOT_EQUALS=63, 
		LESS_THAN=64, GREATER_THAN=65, LESS_OR_EQUALS=66, GREATER_OR_EQUALS=67, 
		LOGICAL_AND=68, LOGICAL_OR=69, LOGICAL_NOT=70, BITWISE_AND=71, BITWISE_OR=72, 
		BITWISE_NOT=73, BITWISE_XOR=74, LEFT_SHIFT=75, RIGHT_SHIFT=76, CONDITIONAL_OPERATOR=77, 
		NULL_COALESCE_OPERATOR=78, INC=79, DEC=80, DOT=81, ELLIPSIS=82, COLON=83, 
		SEMICOLON=84, COMMA=85, ARROW=86, LEFT_PAREN=87, RIGHT_PAREN=88, LEFT_BRACE=89, 
		RIGHT_BRACE=90, LEFT_SQUARE_BRACKET=91, RIGHT_SQUARE_BRACKET=92, USING=93, 
		INCREMENT=94, DECREMENT=95, BREAK=96, READ=97, WRITE=98, NUMBER=99, OR=100, 
		AND=101, CHAR_CONST=102, STRING_CONST=103, TRUE=104, FALSE=105, LEFT_BRACKET=106, 
		RIGHT_BRACKET=107, EQ=108, NE=109, GT=110, GE=111, LT=112, LE=113, MULT=114, 
		DIV=115, MOD=116;
	public const int
		RULE_program = 0, RULE_usingClause = 1, RULE_varDecl = 2, RULE_classDecl = 3, 
		RULE_methodDecl = 4, RULE_formPars = 5, RULE_type = 6, RULE_block = 7, 
		RULE_statement = 8, RULE_actPars = 9, RULE_condition = 10, RULE_condTerm = 11, 
		RULE_condFact = 12, RULE_cast = 13, RULE_expr = 14, RULE_term = 15, RULE_factor = 16, 
		RULE_designator = 17, RULE_relop = 18, RULE_addop = 19, RULE_mulop = 20, 
		RULE_identifier = 21, RULE_array = 22;
	public static readonly string[] ruleNames = {
		"program", "usingClause", "varDecl", "classDecl", "methodDecl", "formPars", 
		"type", "block", "statement", "actPars", "condition", "condTerm", "condFact", 
		"cast", "expr", "term", "factor", "designator", "relop", "addop", "mulop", 
		"identifier", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'namespace'", "'interface'", "'enum'", "'struct'", "'void'", 
		"'new'", "'this'", "'base'", "'if'", "'else'", "'while'", "'do'", "'for'", 
		"'foreach'", "'in'", "'return'", "'switch'", "'case'", "'default'", "'try'", 
		"'catch'", "'finally'", "'throw'", "'throws'", "'private'", "'protected'", 
		"'public'", "'internal'", "'abstract'", "'virtual'", "'override'", "'static'", 
		"'const'", "'readonly'", "'get'", "'set'", "'add'", "'remove'", "'event'", 
		"'as'", "'is'", "'null'", null, null, null, null, null, null, null, "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'!'", "'&'", 
		"'|'", "'~'", "'^'", "'<<'", "'>>'", "'?'", "'??'", "'++'", "'--'", "'.'", 
		"'...'", "':'", "';'", "','", "'->'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "LINE_COMMENT", "ENUM", "STRUCT", "VOID", "NEW", 
		"THIS", "BASE", "IF", "ELSE", "WHILE", "DO", "FOR", "FOREACH", "IN", "RETURN", 
		"SWITCH", "CASE", "DEFAULT", "TRY", "CATCH", "FINALLY", "THROW", "THROWS", 
		"PRIVATE", "PROTECTED", "PUBLIC", "INTERNAL", "ABSTRACT", "VIRTUAL", "OVERRIDE", 
		"STATIC", "CONST", "READONLY", "GET", "SET", "ADD", "REMOVE", "EVENT", 
		"AS", "IS", "NULL", "INT_LITERAL", "HEX_LITERAL", "FLOAT_LITERAL", "DOUBLE_LITERAL", 
		"CHAR_LITERAL", "STRING_LITERAL", "IDENTIFIER", "PLUS", "MINUS", "MULTIPLY", 
		"DIVIDE", "MODULO", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULTIPLY_ASSIGN", 
		"DIVIDE_ASSIGN", "MODULO_ASSIGN", "EQUALS", "NOT_EQUALS", "LESS_THAN", 
		"GREATER_THAN", "LESS_OR_EQUALS", "GREATER_OR_EQUALS", "LOGICAL_AND", 
		"LOGICAL_OR", "LOGICAL_NOT", "BITWISE_AND", "BITWISE_OR", "BITWISE_NOT", 
		"BITWISE_XOR", "LEFT_SHIFT", "RIGHT_SHIFT", "CONDITIONAL_OPERATOR", "NULL_COALESCE_OPERATOR", 
		"INC", "DEC", "DOT", "ELLIPSIS", "COLON", "SEMICOLON", "COMMA", "ARROW", 
		"LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_SQUARE_BRACKET", 
		"RIGHT_SQUARE_BRACKET", "USING", "INCREMENT", "DECREMENT", "BREAK", "READ", 
		"WRITE", "NUMBER", "OR", "AND", "CHAR_CONST", "STRING_CONST", "TRUE", 
		"FALSE", "LEFT_BRACKET", "RIGHT_BRACKET", "EQ", "NE", "GT", "GE", "LT", 
		"LE", "MULT", "DIV", "MOD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ParserParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(ParserParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LEFT_BRACE() { return GetToken(ParserParser.LEFT_BRACE, 0); }
		public ITerminalNode RIGHT_BRACE() { return GetToken(ParserParser.RIGHT_BRACE, 0); }
		public UsingClauseContext usingClause() {
			return GetRuleContext<UsingClauseContext>(0);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==USING) {
				{
				State = 46; usingClause();
				}
			}

			State = 49; Match(WS);
			State = 50; identifier();
			State = 51; Match(LEFT_BRACE);
			State = 57;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WS) | (1L << VOID) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 55;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 52; varDecl();
					}
					break;

				case 2:
					{
					State = 53; classDecl();
					}
					break;

				case 3:
					{
					State = 54; methodDecl();
					}
					break;
				}
				}
				State = 59;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 60; Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingClauseContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(ParserParser.USING, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ParserParser.SEMICOLON, 0); }
		public UsingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterUsingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitUsingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingClauseContext usingClause() {
		UsingClauseContext _localctx = new UsingClauseContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_usingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(USING);
			State = 63; identifier();
			State = 64; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(ParserParser.SEMICOLON, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ParserParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ParserParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; type();
			State = 67; identifier();
			State = 72;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 68; Match(COMMA);
				State = 69; identifier();
				}
				}
				State = 74;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 75; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(ParserParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LEFT_BRACE() { return GetToken(ParserParser.LEFT_BRACE, 0); }
		public ITerminalNode RIGHT_BRACE() { return GetToken(ParserParser.RIGHT_BRACE, 0); }
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(WS);
			State = 78; identifier();
			State = 79; Match(LEFT_BRACE);
			State = 83;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 80; varDecl();
				}
				}
				State = 85;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 86; Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(ParserParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(ParserParser.RIGHT_PAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(ParserParser.VOID, 0); }
		public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				{
				State = 88; type();
				}
				break;
			case VOID:
				{
				State = 89; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 92; identifier();
			State = 93; Match(LEFT_PAREN);
			State = 95;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 94; formPars();
				}
			}

			State = 97; Match(RIGHT_PAREN);
			State = 98; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ParserParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ParserParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterFormPars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitFormPars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; type();
			State = 101; identifier();
			State = 108;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 102; Match(COMMA);
				State = 103; type();
				State = 104; identifier();
				}
				}
				State = 110;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; identifier();
			State = 113;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 112; array();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LEFT_BRACE() { return GetToken(ParserParser.LEFT_BRACE, 0); }
		public ITerminalNode RIGHT_BRACE() { return GetToken(ParserParser.RIGHT_BRACE, 0); }
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(LEFT_BRACE);
			State = 120;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << RETURN) | (1L << IDENTIFIER))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (SEMICOLON - 84)) | (1L << (LEFT_BRACE - 84)) | (1L << (BREAK - 84)) | (1L << (READ - 84)) | (1L << (WRITE - 84)))) != 0)) {
				{
				State = 118;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					State = 116; varDecl();
					}
					break;

				case 2:
					{
					State = 117; statement();
					}
					break;
				}
				}
				State = 122;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 123; Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(ParserParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(ParserParser.SEMICOLON, i);
		}
		public ITerminalNode ASSIGN() { return GetToken(ParserParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(ParserParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(ParserParser.RIGHT_PAREN, 0); }
		public ITerminalNode INCREMENT() { return GetToken(ParserParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(ParserParser.DECREMENT, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public ITerminalNode IF() { return GetToken(ParserParser.IF, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(ParserParser.ELSE, 0); }
		public ITerminalNode FOR() { return GetToken(ParserParser.FOR, 0); }
		public ITerminalNode WHILE() { return GetToken(ParserParser.WHILE, 0); }
		public ITerminalNode BREAK() { return GetToken(ParserParser.BREAK, 0); }
		public ITerminalNode RETURN() { return GetToken(ParserParser.RETURN, 0); }
		public ITerminalNode READ() { return GetToken(ParserParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(ParserParser.WRITE, 0); }
		public ITerminalNode COMMA() { return GetToken(ParserParser.COMMA, 0); }
		public ITerminalNode NUMBER() { return GetToken(ParserParser.NUMBER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_statement);
		int _la;
		try {
			State = 193;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125; designator();
				State = 135;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ASSIGN:
					{
					State = 126; Match(ASSIGN);
					State = 127; expr();
					}
					break;
				case LEFT_PAREN:
					{
					State = 128; Match(LEFT_PAREN);
					State = 130;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << IDENTIFIER) | (1L << MINUS))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (LEFT_PAREN - 87)) | (1L << (NUMBER - 87)) | (1L << (CHAR_CONST - 87)) | (1L << (STRING_CONST - 87)) | (1L << (TRUE - 87)) | (1L << (FALSE - 87)))) != 0)) {
						{
						State = 129; actPars();
						}
					}

					State = 132; Match(RIGHT_PAREN);
					}
					break;
				case INCREMENT:
					{
					State = 133; Match(INCREMENT);
					}
					break;
				case DECREMENT:
					{
					State = 134; Match(DECREMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 137; Match(SEMICOLON);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; Match(IF);
				State = 140; Match(LEFT_PAREN);
				State = 141; condition();
				State = 142; Match(RIGHT_PAREN);
				State = 143; statement();
				State = 146;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					State = 144; Match(ELSE);
					State = 145; statement();
					}
					break;
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 148; Match(FOR);
				State = 149; Match(LEFT_PAREN);
				State = 150; expr();
				State = 151; Match(SEMICOLON);
				State = 153;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << IDENTIFIER) | (1L << MINUS))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (LEFT_PAREN - 87)) | (1L << (NUMBER - 87)) | (1L << (CHAR_CONST - 87)) | (1L << (STRING_CONST - 87)) | (1L << (TRUE - 87)) | (1L << (FALSE - 87)))) != 0)) {
					{
					State = 152; condition();
					}
				}

				State = 155; Match(SEMICOLON);
				State = 157;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << RETURN) | (1L << IDENTIFIER))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (SEMICOLON - 84)) | (1L << (LEFT_BRACE - 84)) | (1L << (BREAK - 84)) | (1L << (READ - 84)) | (1L << (WRITE - 84)))) != 0)) {
					{
					State = 156; statement();
					}
				}

				State = 159; Match(RIGHT_PAREN);
				State = 160; statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 162; Match(WHILE);
				State = 163; Match(LEFT_PAREN);
				State = 164; condition();
				State = 165; Match(RIGHT_PAREN);
				State = 166; statement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 168; Match(BREAK);
				State = 169; Match(SEMICOLON);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 170; Match(RETURN);
				State = 172;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << IDENTIFIER) | (1L << MINUS))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (LEFT_PAREN - 87)) | (1L << (NUMBER - 87)) | (1L << (CHAR_CONST - 87)) | (1L << (STRING_CONST - 87)) | (1L << (TRUE - 87)) | (1L << (FALSE - 87)))) != 0)) {
					{
					State = 171; expr();
					}
				}

				State = 174; Match(SEMICOLON);
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 175; Match(READ);
				State = 176; Match(LEFT_PAREN);
				State = 177; designator();
				State = 178; Match(RIGHT_PAREN);
				State = 179; Match(SEMICOLON);
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 181; Match(WRITE);
				State = 182; Match(LEFT_PAREN);
				State = 183; expr();
				State = 186;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 184; Match(COMMA);
					State = 185; Match(NUMBER);
					}
				}

				State = 188; Match(RIGHT_PAREN);
				State = 189; Match(SEMICOLON);
				}
				break;
			case LEFT_BRACE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 191; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 10);
				{
				State = 192; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ParserParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ParserParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterActPars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitActPars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; expr();
			State = 200;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 196; Match(COMMA);
				State = 197; expr();
				}
				}
				State = 202;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(ParserParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ParserParser.OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; condTerm();
			State = 208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OR) {
				{
				{
				State = 204; Match(OR);
				State = 205; condTerm();
				}
				}
				State = 210;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(ParserParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(ParserParser.AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterCondTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitCondTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; condFact();
			State = 216;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AND) {
				{
				{
				State = 212; Match(AND);
				State = 213; condFact();
				}
				}
				State = 218;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterCondFact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitCondFact(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; expr();
			State = 220; relop();
			State = 221; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(ParserParser.LEFT_PAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(ParserParser.RIGHT_PAREN, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(LEFT_PAREN);
			State = 224; type();
			State = 225; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(ParserParser.MINUS, 0); }
		public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MINUS) {
				{
				State = 227; Match(MINUS);
				}
			}

			State = 231;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 230; cast();
				}
				break;
			}
			State = 233; term();
			State = 239;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 234; addop();
				State = 235; term();
				}
				}
				State = 241;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; factor();
			State = 248;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (MULT - 114)) | (1L << (DIV - 114)) | (1L << (MOD - 114)))) != 0)) {
				{
				{
				State = 243; mulop();
				State = 244; factor();
				}
				}
				State = 250;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(ParserParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(ParserParser.RIGHT_PAREN, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(ParserParser.NUMBER, 0); }
		public ITerminalNode CHAR_CONST() { return GetToken(ParserParser.CHAR_CONST, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(ParserParser.STRING_CONST, 0); }
		public ITerminalNode TRUE() { return GetToken(ParserParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(ParserParser.FALSE, 0); }
		public ITerminalNode NEW() { return GetToken(ParserParser.NEW, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_factor);
		int _la;
		try {
			State = 270;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251; designator();
				State = 257;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 252; Match(LEFT_PAREN);
					State = 254;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << IDENTIFIER) | (1L << MINUS))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (LEFT_PAREN - 87)) | (1L << (NUMBER - 87)) | (1L << (CHAR_CONST - 87)) | (1L << (STRING_CONST - 87)) | (1L << (TRUE - 87)) | (1L << (FALSE - 87)))) != 0)) {
						{
						State = 253; actPars();
						}
					}

					State = 256; Match(RIGHT_PAREN);
					}
				}

				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259; Match(NUMBER);
				}
				break;
			case CHAR_CONST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260; Match(CHAR_CONST);
				}
				break;
			case STRING_CONST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 261; Match(STRING_CONST);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 262; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 263; Match(FALSE);
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 7);
				{
				State = 264; Match(NEW);
				State = 265; identifier();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 266; Match(LEFT_PAREN);
				State = 267; expr();
				State = 268; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(ParserParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(ParserParser.DOT, i);
		}
		public ITerminalNode[] LEFT_BRACKET() { return GetTokens(ParserParser.LEFT_BRACKET); }
		public ITerminalNode LEFT_BRACKET(int i) {
			return GetToken(ParserParser.LEFT_BRACKET, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] RIGHT_BRACKET() { return GetTokens(ParserParser.RIGHT_BRACKET); }
		public ITerminalNode RIGHT_BRACKET(int i) {
			return GetToken(ParserParser.RIGHT_BRACKET, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; identifier();
			State = 281;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT || _la==LEFT_BRACKET) {
				{
				State = 279;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case DOT:
					{
					State = 273; Match(DOT);
					State = 274; identifier();
					}
					break;
				case LEFT_BRACKET:
					{
					State = 275; Match(LEFT_BRACKET);
					State = 276; expr();
					State = 277; Match(RIGHT_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 283;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(ParserParser.EQ, 0); }
		public ITerminalNode NE() { return GetToken(ParserParser.NE, 0); }
		public ITerminalNode GT() { return GetToken(ParserParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(ParserParser.GE, 0); }
		public ITerminalNode LT() { return GetToken(ParserParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(ParserParser.LE, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			_la = _input.La(1);
			if ( !(((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (EQ - 108)) | (1L << (NE - 108)) | (1L << (GT - 108)) | (1L << (GE - 108)) | (1L << (LT - 108)) | (1L << (LE - 108)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(ParserParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(ParserParser.MINUS, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterAddop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitAddop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			_la = _input.La(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(ParserParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(ParserParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(ParserParser.MOD, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterMulop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitMulop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			_la = _input.La(1);
			if ( !(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (MULT - 114)) | (1L << (DIV - 114)) | (1L << (MOD - 114)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ParserParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LEFT_BRACKET() { return GetToken(ParserParser.LEFT_BRACKET, 0); }
		public ITerminalNode RIGHT_BRACKET() { return GetToken(ParserParser.RIGHT_BRACKET, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParserListener typedListener = listener as IParserListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserVisitor<TResult> typedVisitor = visitor as IParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Match(LEFT_BRACKET);
			State = 293; Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3v\x12A\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x3\x2\x5\x2\x32\n\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2:\n\x2\f\x2\xE\x2=\v\x2\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4I\n\x4\f\x4\xE\x4L\v"+
		"\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5T\n\x5\f\x5\xE\x5W\v\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x5\x6]\n\x6\x3\x6\x3\x6\x3\x6\x5\x6\x62\n\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\am\n\a\f\a\xE\ap\v\a\x3"+
		"\b\x3\b\x5\bt\n\b\x3\t\x3\t\x3\t\a\ty\n\t\f\t\xE\t|\v\t\x3\t\x3\t\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x5\n\x85\n\n\x3\n\x3\n\x3\n\x5\n\x8A\n\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x95\n\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x5\n\x9C\n\n\x3\n\x3\n\x5\n\xA0\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xAF\n\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xBD\n\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x5\n\xC4\n\n\x3\v\x3\v\x3\v\a\v\xC9\n\v\f\v\xE\v\xCC\v\v\x3\f"+
		"\x3\f\x3\f\a\f\xD1\n\f\f\f\xE\f\xD4\v\f\x3\r\x3\r\x3\r\a\r\xD9\n\r\f\r"+
		"\xE\r\xDC\v\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x5"+
		"\x10\xE7\n\x10\x3\x10\x5\x10\xEA\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10"+
		"\xF0\n\x10\f\x10\xE\x10\xF3\v\x10\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\xF9"+
		"\n\x11\f\x11\xE\x11\xFC\v\x11\x3\x12\x3\x12\x3\x12\x5\x12\x101\n\x12\x3"+
		"\x12\x5\x12\x104\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x111\n\x12\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\a\x13\x11A\n\x13\f\x13\xE\x13\x11D\v\x13\x3"+
		"\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x2\x2\x2\x19\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2"+
		"*\x2,\x2.\x2\x2\x5\x3\x2ns\x3\x2\x35\x36\x3\x2tv\x142\x2\x31\x3\x2\x2"+
		"\x2\x4@\x3\x2\x2\x2\x6\x44\x3\x2\x2\x2\bO\x3\x2\x2\x2\n\\\x3\x2\x2\x2"+
		"\f\x66\x3\x2\x2\x2\xEq\x3\x2\x2\x2\x10u\x3\x2\x2\x2\x12\xC3\x3\x2\x2\x2"+
		"\x14\xC5\x3\x2\x2\x2\x16\xCD\x3\x2\x2\x2\x18\xD5\x3\x2\x2\x2\x1A\xDD\x3"+
		"\x2\x2\x2\x1C\xE1\x3\x2\x2\x2\x1E\xE6\x3\x2\x2\x2 \xF4\x3\x2\x2\x2\"\x110"+
		"\x3\x2\x2\x2$\x112\x3\x2\x2\x2&\x11E\x3\x2\x2\x2(\x120\x3\x2\x2\x2*\x122"+
		"\x3\x2\x2\x2,\x124\x3\x2\x2\x2.\x126\x3\x2\x2\x2\x30\x32\x5\x4\x3\x2\x31"+
		"\x30\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x34\a\x3"+
		"\x2\x2\x34\x35\x5,\x17\x2\x35;\a[\x2\x2\x36:\x5\x6\x4\x2\x37:\x5\b\x5"+
		"\x2\x38:\x5\n\x6\x2\x39\x36\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39\x38\x3"+
		"\x2\x2\x2:=\x3\x2\x2\x2;\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<>\x3\x2\x2\x2="+
		";\x3\x2\x2\x2>?\a\\\x2\x2?\x3\x3\x2\x2\x2@\x41\a_\x2\x2\x41\x42\x5,\x17"+
		"\x2\x42\x43\aV\x2\x2\x43\x5\x3\x2\x2\x2\x44\x45\x5\xE\b\x2\x45J\x5,\x17"+
		"\x2\x46G\aW\x2\x2GI\x5,\x17\x2H\x46\x3\x2\x2\x2IL\x3\x2\x2\x2JH\x3\x2"+
		"\x2\x2JK\x3\x2\x2\x2KM\x3\x2\x2\x2LJ\x3\x2\x2\x2MN\aV\x2\x2N\a\x3\x2\x2"+
		"\x2OP\a\x3\x2\x2PQ\x5,\x17\x2QU\a[\x2\x2RT\x5\x6\x4\x2SR\x3\x2\x2\x2T"+
		"W\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2VX\x3\x2\x2\x2WU\x3\x2\x2\x2"+
		"XY\a\\\x2\x2Y\t\x3\x2\x2\x2Z]\x5\xE\b\x2[]\a\b\x2\x2\\Z\x3\x2\x2\x2\\"+
		"[\x3\x2\x2\x2]^\x3\x2\x2\x2^_\x5,\x17\x2_\x61\aY\x2\x2`\x62\x5\f\a\x2"+
		"\x61`\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x64\aZ\x2"+
		"\x2\x64\x65\x5\x10\t\x2\x65\v\x3\x2\x2\x2\x66g\x5\xE\b\x2gn\x5,\x17\x2"+
		"hi\aW\x2\x2ij\x5\xE\b\x2jk\x5,\x17\x2km\x3\x2\x2\x2lh\x3\x2\x2\x2mp\x3"+
		"\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2o\r\x3\x2\x2\x2pn\x3\x2\x2\x2qs\x5"+
		",\x17\x2rt\x5.\x18\x2sr\x3\x2\x2\x2st\x3\x2\x2\x2t\xF\x3\x2\x2\x2uz\a"+
		"[\x2\x2vy\x5\x6\x4\x2wy\x5\x12\n\x2xv\x3\x2\x2\x2xw\x3\x2\x2\x2y|\x3\x2"+
		"\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{}\x3\x2\x2\x2|z\x3\x2\x2\x2}~\a\\\x2"+
		"\x2~\x11\x3\x2\x2\x2\x7F\x89\x5$\x13\x2\x80\x81\a:\x2\x2\x81\x8A\x5\x1E"+
		"\x10\x2\x82\x84\aY\x2\x2\x83\x85\x5\x14\v\x2\x84\x83\x3\x2\x2\x2\x84\x85"+
		"\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x8A\aZ\x2\x2\x87\x8A\a`\x2\x2\x88"+
		"\x8A\a\x61\x2\x2\x89\x80\x3\x2\x2\x2\x89\x82\x3\x2\x2\x2\x89\x87\x3\x2"+
		"\x2\x2\x89\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\aV\x2\x2\x8C\xC4"+
		"\x3\x2\x2\x2\x8D\x8E\a\f\x2\x2\x8E\x8F\aY\x2\x2\x8F\x90\x5\x16\f\x2\x90"+
		"\x91\aZ\x2\x2\x91\x94\x5\x12\n\x2\x92\x93\a\r\x2\x2\x93\x95\x5\x12\n\x2"+
		"\x94\x92\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\xC4\x3\x2\x2\x2\x96\x97\a"+
		"\x10\x2\x2\x97\x98\aY\x2\x2\x98\x99\x5\x1E\x10\x2\x99\x9B\aV\x2\x2\x9A"+
		"\x9C\x5\x16\f\x2\x9B\x9A\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9D\x3\x2"+
		"\x2\x2\x9D\x9F\aV\x2\x2\x9E\xA0\x5\x12\n\x2\x9F\x9E\x3\x2\x2\x2\x9F\xA0"+
		"\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA2\aZ\x2\x2\xA2\xA3\x5\x12\n\x2"+
		"\xA3\xC4\x3\x2\x2\x2\xA4\xA5\a\xE\x2\x2\xA5\xA6\aY\x2\x2\xA6\xA7\x5\x16"+
		"\f\x2\xA7\xA8\aZ\x2\x2\xA8\xA9\x5\x12\n\x2\xA9\xC4\x3\x2\x2\x2\xAA\xAB"+
		"\a\x62\x2\x2\xAB\xC4\aV\x2\x2\xAC\xAE\a\x13\x2\x2\xAD\xAF\x5\x1E\x10\x2"+
		"\xAE\xAD\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xC4\a"+
		"V\x2\x2\xB1\xB2\a\x63\x2\x2\xB2\xB3\aY\x2\x2\xB3\xB4\x5$\x13\x2\xB4\xB5"+
		"\aZ\x2\x2\xB5\xB6\aV\x2\x2\xB6\xC4\x3\x2\x2\x2\xB7\xB8\a\x64\x2\x2\xB8"+
		"\xB9\aY\x2\x2\xB9\xBC\x5\x1E\x10\x2\xBA\xBB\aW\x2\x2\xBB\xBD\a\x65\x2"+
		"\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xBF"+
		"\aZ\x2\x2\xBF\xC0\aV\x2\x2\xC0\xC4\x3\x2\x2\x2\xC1\xC4\x5\x10\t\x2\xC2"+
		"\xC4\aV\x2\x2\xC3\x7F\x3\x2\x2\x2\xC3\x8D\x3\x2\x2\x2\xC3\x96\x3\x2\x2"+
		"\x2\xC3\xA4\x3\x2\x2\x2\xC3\xAA\x3\x2\x2\x2\xC3\xAC\x3\x2\x2\x2\xC3\xB1"+
		"\x3\x2\x2\x2\xC3\xB7\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC3\xC2\x3\x2\x2"+
		"\x2\xC4\x13\x3\x2\x2\x2\xC5\xCA\x5\x1E\x10\x2\xC6\xC7\aW\x2\x2\xC7\xC9"+
		"\x5\x1E\x10\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCC\x3\x2\x2\x2\xCA\xC8\x3\x2\x2"+
		"\x2\xCA\xCB\x3\x2\x2\x2\xCB\x15\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCD\xD2"+
		"\x5\x18\r\x2\xCE\xCF\a\x66\x2\x2\xCF\xD1\x5\x18\r\x2\xD0\xCE\x3\x2\x2"+
		"\x2\xD1\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\x17"+
		"\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xDA\x5\x1A\xE\x2\xD6\xD7\ag\x2\x2"+
		"\xD7\xD9\x5\x1A\xE\x2\xD8\xD6\x3\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8"+
		"\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\x19\x3\x2\x2\x2\xDC\xDA\x3\x2\x2"+
		"\x2\xDD\xDE\x5\x1E\x10\x2\xDE\xDF\x5&\x14\x2\xDF\xE0\x5\x1E\x10\x2\xE0"+
		"\x1B\x3\x2\x2\x2\xE1\xE2\aY\x2\x2\xE2\xE3\x5\xE\b\x2\xE3\xE4\aZ\x2\x2"+
		"\xE4\x1D\x3\x2\x2\x2\xE5\xE7\a\x36\x2\x2\xE6\xE5\x3\x2\x2\x2\xE6\xE7\x3"+
		"\x2\x2\x2\xE7\xE9\x3\x2\x2\x2\xE8\xEA\x5\x1C\xF\x2\xE9\xE8\x3\x2\x2\x2"+
		"\xE9\xEA\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xF1\x5 \x11\x2\xEC\xED\x5"+
		"(\x15\x2\xED\xEE\x5 \x11\x2\xEE\xF0\x3\x2\x2\x2\xEF\xEC\x3\x2\x2\x2\xF0"+
		"\xF3\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\x1F\x3\x2"+
		"\x2\x2\xF3\xF1\x3\x2\x2\x2\xF4\xFA\x5\"\x12\x2\xF5\xF6\x5*\x16\x2\xF6"+
		"\xF7\x5\"\x12\x2\xF7\xF9\x3\x2\x2\x2\xF8\xF5\x3\x2\x2\x2\xF9\xFC\x3\x2"+
		"\x2\x2\xFA\xF8\x3\x2\x2\x2\xFA\xFB\x3\x2\x2\x2\xFB!\x3\x2\x2\x2\xFC\xFA"+
		"\x3\x2\x2\x2\xFD\x103\x5$\x13\x2\xFE\x100\aY\x2\x2\xFF\x101\x5\x14\v\x2"+
		"\x100\xFF\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102"+
		"\x104\aZ\x2\x2\x103\xFE\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x111\x3"+
		"\x2\x2\x2\x105\x111\a\x65\x2\x2\x106\x111\ah\x2\x2\x107\x111\ai\x2\x2"+
		"\x108\x111\aj\x2\x2\x109\x111\ak\x2\x2\x10A\x10B\a\t\x2\x2\x10B\x111\x5"+
		",\x17\x2\x10C\x10D\aY\x2\x2\x10D\x10E\x5\x1E\x10\x2\x10E\x10F\aZ\x2\x2"+
		"\x10F\x111\x3\x2\x2\x2\x110\xFD\x3\x2\x2\x2\x110\x105\x3\x2\x2\x2\x110"+
		"\x106\x3\x2\x2\x2\x110\x107\x3\x2\x2\x2\x110\x108\x3\x2\x2\x2\x110\x109"+
		"\x3\x2\x2\x2\x110\x10A\x3\x2\x2\x2\x110\x10C\x3\x2\x2\x2\x111#\x3\x2\x2"+
		"\x2\x112\x11B\x5,\x17\x2\x113\x114\aS\x2\x2\x114\x11A\x5,\x17\x2\x115"+
		"\x116\al\x2\x2\x116\x117\x5\x1E\x10\x2\x117\x118\am\x2\x2\x118\x11A\x3"+
		"\x2\x2\x2\x119\x113\x3\x2\x2\x2\x119\x115\x3\x2\x2\x2\x11A\x11D\x3\x2"+
		"\x2\x2\x11B\x119\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C%\x3\x2\x2\x2\x11D"+
		"\x11B\x3\x2\x2\x2\x11E\x11F\t\x2\x2\x2\x11F\'\x3\x2\x2\x2\x120\x121\t"+
		"\x3\x2\x2\x121)\x3\x2\x2\x2\x122\x123\t\x4\x2\x2\x123+\x3\x2\x2\x2\x124"+
		"\x125\a\x34\x2\x2\x125-\x3\x2\x2\x2\x126\x127\al\x2\x2\x127\x128\am\x2"+
		"\x2\x128/\x3\x2\x2\x2!\x31\x39;JU\\\x61nsxz\x84\x89\x94\x9B\x9F\xAE\xBC"+
		"\xC3\xCA\xD2\xDA\xE6\xE9\xF1\xFA\x100\x103\x110\x119\x11B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Compilador
